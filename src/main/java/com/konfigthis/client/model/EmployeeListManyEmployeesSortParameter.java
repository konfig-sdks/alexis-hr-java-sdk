/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeListManyEmployeesSortParameter
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeListManyEmployeesSortParameter {
  /**
   * Gets or Sets title
   */
  @JsonAdapter(TitleEnum.Adapter.class)
 public enum TitleEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    TitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TitleEnum fromValue(String value) {
      for (TitleEnum b : TitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TitleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private TitleEnum title;

  /**
   * Gets or Sets id
   */
  @JsonAdapter(IdEnum.Adapter.class)
 public enum IdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    IdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdEnum fromValue(String value) {
      for (IdEnum b : IdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private IdEnum id;

  /**
   * Gets or Sets active
   */
  @JsonAdapter(ActiveEnum.Adapter.class)
 public enum ActiveEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    ActiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActiveEnum fromValue(String value) {
      for (ActiveEnum b : ActiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private ActiveEnum active;

  /**
   * Gets or Sets companyId
   */
  @JsonAdapter(CompanyIdEnum.Adapter.class)
 public enum CompanyIdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    CompanyIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompanyIdEnum fromValue(String value) {
      for (CompanyIdEnum b : CompanyIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompanyIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompanyIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompanyIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompanyIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private CompanyIdEnum companyId;

  /**
   * Gets or Sets officeId
   */
  @JsonAdapter(OfficeIdEnum.Adapter.class)
 public enum OfficeIdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    OfficeIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OfficeIdEnum fromValue(String value) {
      for (OfficeIdEnum b : OfficeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OfficeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OfficeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OfficeIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OfficeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OFFICE_ID = "officeId";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private OfficeIdEnum officeId;

  /**
   * Gets or Sets managerEmployeeId
   */
  @JsonAdapter(ManagerEmployeeIdEnum.Adapter.class)
 public enum ManagerEmployeeIdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    ManagerEmployeeIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagerEmployeeIdEnum fromValue(String value) {
      for (ManagerEmployeeIdEnum b : ManagerEmployeeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagerEmployeeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagerEmployeeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagerEmployeeIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagerEmployeeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MANAGER_EMPLOYEE_ID = "managerEmployeeId";
  @SerializedName(SERIALIZED_NAME_MANAGER_EMPLOYEE_ID)
  private ManagerEmployeeIdEnum managerEmployeeId;

  /**
   * Gets or Sets departmentId
   */
  @JsonAdapter(DepartmentIdEnum.Adapter.class)
 public enum DepartmentIdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    DepartmentIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepartmentIdEnum fromValue(String value) {
      for (DepartmentIdEnum b : DepartmentIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepartmentIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepartmentIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepartmentIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepartmentIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "departmentId";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private DepartmentIdEnum departmentId;

  /**
   * Gets or Sets costCenterId
   */
  @JsonAdapter(CostCenterIdEnum.Adapter.class)
 public enum CostCenterIdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    CostCenterIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CostCenterIdEnum fromValue(String value) {
      for (CostCenterIdEnum b : CostCenterIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CostCenterIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CostCenterIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CostCenterIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CostCenterIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COST_CENTER_ID = "costCenterId";
  @SerializedName(SERIALIZED_NAME_COST_CENTER_ID)
  private CostCenterIdEnum costCenterId;

  /**
   * Gets or Sets employmentId
   */
  @JsonAdapter(EmploymentIdEnum.Adapter.class)
 public enum EmploymentIdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    EmploymentIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmploymentIdEnum fromValue(String value) {
      for (EmploymentIdEnum b : EmploymentIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmploymentIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmploymentIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmploymentIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmploymentIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYMENT_ID = "employmentId";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_ID)
  private EmploymentIdEnum employmentId;

  /**
   * Gets or Sets employmentTypeId
   */
  @JsonAdapter(EmploymentTypeIdEnum.Adapter.class)
 public enum EmploymentTypeIdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    EmploymentTypeIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmploymentTypeIdEnum fromValue(String value) {
      for (EmploymentTypeIdEnum b : EmploymentTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmploymentTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmploymentTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmploymentTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmploymentTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYMENT_TYPE_ID = "employmentTypeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TYPE_ID)
  private EmploymentTypeIdEnum employmentTypeId;

  /**
   * Gets or Sets employmentCountry
   */
  @JsonAdapter(EmploymentCountryEnum.Adapter.class)
 public enum EmploymentCountryEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    EmploymentCountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmploymentCountryEnum fromValue(String value) {
      for (EmploymentCountryEnum b : EmploymentCountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmploymentCountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmploymentCountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmploymentCountryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmploymentCountryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYMENT_COUNTRY = "employmentCountry";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_COUNTRY)
  private EmploymentCountryEnum employmentCountry;

  /**
   * Gets or Sets compensationId
   */
  @JsonAdapter(CompensationIdEnum.Adapter.class)
 public enum CompensationIdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    CompensationIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompensationIdEnum fromValue(String value) {
      for (CompensationIdEnum b : CompensationIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompensationIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompensationIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompensationIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompensationIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPENSATION_ID = "compensationId";
  @SerializedName(SERIALIZED_NAME_COMPENSATION_ID)
  private CompensationIdEnum compensationId;

  /**
   * Gets or Sets userId
   */
  @JsonAdapter(UserIdEnum.Adapter.class)
 public enum UserIdEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    UserIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserIdEnum fromValue(String value) {
      for (UserIdEnum b : UserIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UserIdEnum userId;

  /**
   * Gets or Sets userName
   */
  @JsonAdapter(UserNameEnum.Adapter.class)
 public enum UserNameEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    UserNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserNameEnum fromValue(String value) {
      for (UserNameEnum b : UserNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private UserNameEnum userName;

  /**
   * Gets or Sets division
   */
  @JsonAdapter(DivisionEnum.Adapter.class)
 public enum DivisionEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    DivisionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DivisionEnum fromValue(String value) {
      for (DivisionEnum b : DivisionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DivisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DivisionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DivisionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DivisionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIVISION = "division";
  @SerializedName(SERIALIZED_NAME_DIVISION)
  private DivisionEnum division;

  /**
   * Gets or Sets organization
   */
  @JsonAdapter(OrganizationEnum.Adapter.class)
 public enum OrganizationEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    OrganizationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationEnum fromValue(String value) {
      for (OrganizationEnum b : OrganizationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private OrganizationEnum organization;

  /**
   * Gets or Sets employeeNumber
   */
  @JsonAdapter(EmployeeNumberEnum.Adapter.class)
 public enum EmployeeNumberEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    EmployeeNumberEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployeeNumberEnum fromValue(String value) {
      for (EmployeeNumberEnum b : EmployeeNumberEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmployeeNumberEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployeeNumberEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployeeNumberEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmployeeNumberEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private EmployeeNumberEnum employeeNumber;

  /**
   * Gets or Sets workEmail
   */
  @JsonAdapter(WorkEmailEnum.Adapter.class)
 public enum WorkEmailEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    WorkEmailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkEmailEnum fromValue(String value) {
      for (WorkEmailEnum b : WorkEmailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkEmailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkEmailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkEmailEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkEmailEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WORK_EMAIL = "workEmail";
  @SerializedName(SERIALIZED_NAME_WORK_EMAIL)
  private WorkEmailEnum workEmail;

  /**
   * Gets or Sets workPhone
   */
  @JsonAdapter(WorkPhoneEnum.Adapter.class)
 public enum WorkPhoneEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    WorkPhoneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkPhoneEnum fromValue(String value) {
      for (WorkPhoneEnum b : WorkPhoneEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkPhoneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkPhoneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkPhoneEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkPhoneEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WORK_PHONE = "workPhone";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE)
  private WorkPhoneEnum workPhone;

  /**
   * Gets or Sets workPhoneSanitized
   */
  @JsonAdapter(WorkPhoneSanitizedEnum.Adapter.class)
 public enum WorkPhoneSanitizedEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    WorkPhoneSanitizedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkPhoneSanitizedEnum fromValue(String value) {
      for (WorkPhoneSanitizedEnum b : WorkPhoneSanitizedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkPhoneSanitizedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkPhoneSanitizedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkPhoneSanitizedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkPhoneSanitizedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WORK_PHONE_SANITIZED = "workPhoneSanitized";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE_SANITIZED)
  private WorkPhoneSanitizedEnum workPhoneSanitized;

  /**
   * Gets or Sets hireDate
   */
  @JsonAdapter(HireDateEnum.Adapter.class)
 public enum HireDateEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    HireDateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HireDateEnum fromValue(String value) {
      for (HireDateEnum b : HireDateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HireDateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HireDateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HireDateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HireDateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HIRE_DATE = "hireDate";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private HireDateEnum hireDate;

  /**
   * Gets or Sets endDate
   */
  @JsonAdapter(EndDateEnum.Adapter.class)
 public enum EndDateEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    EndDateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EndDateEnum fromValue(String value) {
      for (EndDateEnum b : EndDateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EndDateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EndDateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EndDateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EndDateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private EndDateEnum endDate;

  /**
   * Gets or Sets hasOccupationalPension
   */
  @JsonAdapter(HasOccupationalPensionEnum.Adapter.class)
 public enum HasOccupationalPensionEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    HasOccupationalPensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HasOccupationalPensionEnum fromValue(String value) {
      for (HasOccupationalPensionEnum b : HasOccupationalPensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HasOccupationalPensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HasOccupationalPensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HasOccupationalPensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HasOccupationalPensionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HAS_OCCUPATIONAL_PENSION = "hasOccupationalPension";
  @SerializedName(SERIALIZED_NAME_HAS_OCCUPATIONAL_PENSION)
  private HasOccupationalPensionEnum hasOccupationalPension;

  /**
   * Gets or Sets privateEmail
   */
  @JsonAdapter(PrivateEmailEnum.Adapter.class)
 public enum PrivateEmailEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    PrivateEmailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivateEmailEnum fromValue(String value) {
      for (PrivateEmailEnum b : PrivateEmailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivateEmailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivateEmailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivateEmailEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivateEmailEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIVATE_EMAIL = "privateEmail";
  @SerializedName(SERIALIZED_NAME_PRIVATE_EMAIL)
  private PrivateEmailEnum privateEmail;

  /**
   * Gets or Sets firstName
   */
  @JsonAdapter(FirstNameEnum.Adapter.class)
 public enum FirstNameEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    FirstNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirstNameEnum fromValue(String value) {
      for (FirstNameEnum b : FirstNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FirstNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirstNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirstNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FirstNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private FirstNameEnum firstName;

  /**
   * Gets or Sets lastName
   */
  @JsonAdapter(LastNameEnum.Adapter.class)
 public enum LastNameEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    LastNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LastNameEnum fromValue(String value) {
      for (LastNameEnum b : LastNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LastNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LastNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LastNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LastNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private LastNameEnum lastName;

  /**
   * Gets or Sets ssn
   */
  @JsonAdapter(SsnEnum.Adapter.class)
 public enum SsnEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    SsnEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SsnEnum fromValue(String value) {
      for (SsnEnum b : SsnEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SsnEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SsnEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SsnEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SsnEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  private SsnEnum ssn;

  /**
   * Gets or Sets privatePhone
   */
  @JsonAdapter(PrivatePhoneEnum.Adapter.class)
 public enum PrivatePhoneEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    PrivatePhoneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivatePhoneEnum fromValue(String value) {
      for (PrivatePhoneEnum b : PrivatePhoneEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivatePhoneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivatePhoneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivatePhoneEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivatePhoneEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIVATE_PHONE = "privatePhone";
  @SerializedName(SERIALIZED_NAME_PRIVATE_PHONE)
  private PrivatePhoneEnum privatePhone;

  /**
   * Gets or Sets privatePhoneSanitized
   */
  @JsonAdapter(PrivatePhoneSanitizedEnum.Adapter.class)
 public enum PrivatePhoneSanitizedEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    PrivatePhoneSanitizedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivatePhoneSanitizedEnum fromValue(String value) {
      for (PrivatePhoneSanitizedEnum b : PrivatePhoneSanitizedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivatePhoneSanitizedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivatePhoneSanitizedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivatePhoneSanitizedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivatePhoneSanitizedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIVATE_PHONE_SANITIZED = "privatePhoneSanitized";
  @SerializedName(SERIALIZED_NAME_PRIVATE_PHONE_SANITIZED)
  private PrivatePhoneSanitizedEnum privatePhoneSanitized;

  /**
   * Gets or Sets birthDate
   */
  @JsonAdapter(BirthDateEnum.Adapter.class)
 public enum BirthDateEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    BirthDateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BirthDateEnum fromValue(String value) {
      for (BirthDateEnum b : BirthDateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BirthDateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BirthDateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BirthDateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BirthDateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private BirthDateEnum birthDate;

  /**
   * Gets or Sets age
   */
  @JsonAdapter(AgeEnum.Adapter.class)
 public enum AgeEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    AgeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgeEnum fromValue(String value) {
      for (AgeEnum b : AgeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private AgeEnum age;

  /**
   * Gets or Sets nationality
   */
  @JsonAdapter(NationalityEnum.Adapter.class)
 public enum NationalityEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    NationalityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NationalityEnum fromValue(String value) {
      for (NationalityEnum b : NationalityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NationalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NationalityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NationalityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NationalityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private NationalityEnum nationality;

  /**
   * Gets or Sets gender
   */
  @JsonAdapter(GenderEnum.Adapter.class)
 public enum GenderEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  /**
   * Gets or Sets pronoun
   */
  @JsonAdapter(PronounEnum.Adapter.class)
 public enum PronounEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    PronounEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PronounEnum fromValue(String value) {
      for (PronounEnum b : PronounEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PronounEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PronounEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PronounEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PronounEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRONOUN = "pronoun";
  @SerializedName(SERIALIZED_NAME_PRONOUN)
  private PronounEnum pronoun;

  /**
   * Gets or Sets created
   */
  @JsonAdapter(CreatedEnum.Adapter.class)
 public enum CreatedEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    CreatedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreatedEnum fromValue(String value) {
      for (CreatedEnum b : CreatedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreatedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreatedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreatedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreatedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private CreatedEnum created;

  /**
   * Gets or Sets updated
   */
  @JsonAdapter(UpdatedEnum.Adapter.class)
 public enum UpdatedEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    UpdatedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdatedEnum fromValue(String value) {
      for (UpdatedEnum b : UpdatedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdatedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdatedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdatedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdatedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private UpdatedEnum updated;

  public EmployeeListManyEmployeesSortParameter() {
  }

  public EmployeeListManyEmployeesSortParameter title(TitleEnum title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TitleEnum getTitle() {
    return title;
  }


  public void setTitle(TitleEnum title) {
    
    
    
    this.title = title;
  }


  public EmployeeListManyEmployeesSortParameter id(IdEnum id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IdEnum getId() {
    return id;
  }


  public void setId(IdEnum id) {
    
    
    
    this.id = id;
  }


  public EmployeeListManyEmployeesSortParameter active(ActiveEnum active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ActiveEnum getActive() {
    return active;
  }


  public void setActive(ActiveEnum active) {
    
    
    
    this.active = active;
  }


  public EmployeeListManyEmployeesSortParameter companyId(CompanyIdEnum companyId) {
    
    
    
    
    this.companyId = companyId;
    return this;
  }

   /**
   * Get companyId
   * @return companyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompanyIdEnum getCompanyId() {
    return companyId;
  }


  public void setCompanyId(CompanyIdEnum companyId) {
    
    
    
    this.companyId = companyId;
  }


  public EmployeeListManyEmployeesSortParameter officeId(OfficeIdEnum officeId) {
    
    
    
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OfficeIdEnum getOfficeId() {
    return officeId;
  }


  public void setOfficeId(OfficeIdEnum officeId) {
    
    
    
    this.officeId = officeId;
  }


  public EmployeeListManyEmployeesSortParameter managerEmployeeId(ManagerEmployeeIdEnum managerEmployeeId) {
    
    
    
    
    this.managerEmployeeId = managerEmployeeId;
    return this;
  }

   /**
   * Get managerEmployeeId
   * @return managerEmployeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ManagerEmployeeIdEnum getManagerEmployeeId() {
    return managerEmployeeId;
  }


  public void setManagerEmployeeId(ManagerEmployeeIdEnum managerEmployeeId) {
    
    
    
    this.managerEmployeeId = managerEmployeeId;
  }


  public EmployeeListManyEmployeesSortParameter departmentId(DepartmentIdEnum departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Get departmentId
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DepartmentIdEnum getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(DepartmentIdEnum departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public EmployeeListManyEmployeesSortParameter costCenterId(CostCenterIdEnum costCenterId) {
    
    
    
    
    this.costCenterId = costCenterId;
    return this;
  }

   /**
   * Get costCenterId
   * @return costCenterId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CostCenterIdEnum getCostCenterId() {
    return costCenterId;
  }


  public void setCostCenterId(CostCenterIdEnum costCenterId) {
    
    
    
    this.costCenterId = costCenterId;
  }


  public EmployeeListManyEmployeesSortParameter employmentId(EmploymentIdEnum employmentId) {
    
    
    
    
    this.employmentId = employmentId;
    return this;
  }

   /**
   * Get employmentId
   * @return employmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmploymentIdEnum getEmploymentId() {
    return employmentId;
  }


  public void setEmploymentId(EmploymentIdEnum employmentId) {
    
    
    
    this.employmentId = employmentId;
  }


  public EmployeeListManyEmployeesSortParameter employmentTypeId(EmploymentTypeIdEnum employmentTypeId) {
    
    
    
    
    this.employmentTypeId = employmentTypeId;
    return this;
  }

   /**
   * Get employmentTypeId
   * @return employmentTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmploymentTypeIdEnum getEmploymentTypeId() {
    return employmentTypeId;
  }


  public void setEmploymentTypeId(EmploymentTypeIdEnum employmentTypeId) {
    
    
    
    this.employmentTypeId = employmentTypeId;
  }


  public EmployeeListManyEmployeesSortParameter employmentCountry(EmploymentCountryEnum employmentCountry) {
    
    
    
    
    this.employmentCountry = employmentCountry;
    return this;
  }

   /**
   * Get employmentCountry
   * @return employmentCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmploymentCountryEnum getEmploymentCountry() {
    return employmentCountry;
  }


  public void setEmploymentCountry(EmploymentCountryEnum employmentCountry) {
    
    
    
    this.employmentCountry = employmentCountry;
  }


  public EmployeeListManyEmployeesSortParameter compensationId(CompensationIdEnum compensationId) {
    
    
    
    
    this.compensationId = compensationId;
    return this;
  }

   /**
   * Get compensationId
   * @return compensationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompensationIdEnum getCompensationId() {
    return compensationId;
  }


  public void setCompensationId(CompensationIdEnum compensationId) {
    
    
    
    this.compensationId = compensationId;
  }


  public EmployeeListManyEmployeesSortParameter userId(UserIdEnum userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserIdEnum getUserId() {
    return userId;
  }


  public void setUserId(UserIdEnum userId) {
    
    
    
    this.userId = userId;
  }


  public EmployeeListManyEmployeesSortParameter userName(UserNameEnum userName) {
    
    
    
    
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserNameEnum getUserName() {
    return userName;
  }


  public void setUserName(UserNameEnum userName) {
    
    
    
    this.userName = userName;
  }


  public EmployeeListManyEmployeesSortParameter division(DivisionEnum division) {
    
    
    
    
    this.division = division;
    return this;
  }

   /**
   * Get division
   * @return division
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DivisionEnum getDivision() {
    return division;
  }


  public void setDivision(DivisionEnum division) {
    
    
    
    this.division = division;
  }


  public EmployeeListManyEmployeesSortParameter organization(OrganizationEnum organization) {
    
    
    
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrganizationEnum getOrganization() {
    return organization;
  }


  public void setOrganization(OrganizationEnum organization) {
    
    
    
    this.organization = organization;
  }


  public EmployeeListManyEmployeesSortParameter employeeNumber(EmployeeNumberEnum employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeNumberEnum getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(EmployeeNumberEnum employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public EmployeeListManyEmployeesSortParameter workEmail(WorkEmailEnum workEmail) {
    
    
    
    
    this.workEmail = workEmail;
    return this;
  }

   /**
   * Get workEmail
   * @return workEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkEmailEnum getWorkEmail() {
    return workEmail;
  }


  public void setWorkEmail(WorkEmailEnum workEmail) {
    
    
    
    this.workEmail = workEmail;
  }


  public EmployeeListManyEmployeesSortParameter workPhone(WorkPhoneEnum workPhone) {
    
    
    
    
    this.workPhone = workPhone;
    return this;
  }

   /**
   * Get workPhone
   * @return workPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkPhoneEnum getWorkPhone() {
    return workPhone;
  }


  public void setWorkPhone(WorkPhoneEnum workPhone) {
    
    
    
    this.workPhone = workPhone;
  }


  public EmployeeListManyEmployeesSortParameter workPhoneSanitized(WorkPhoneSanitizedEnum workPhoneSanitized) {
    
    
    
    
    this.workPhoneSanitized = workPhoneSanitized;
    return this;
  }

   /**
   * Get workPhoneSanitized
   * @return workPhoneSanitized
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkPhoneSanitizedEnum getWorkPhoneSanitized() {
    return workPhoneSanitized;
  }


  public void setWorkPhoneSanitized(WorkPhoneSanitizedEnum workPhoneSanitized) {
    
    
    
    this.workPhoneSanitized = workPhoneSanitized;
  }


  public EmployeeListManyEmployeesSortParameter hireDate(HireDateEnum hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * Get hireDate
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public HireDateEnum getHireDate() {
    return hireDate;
  }


  public void setHireDate(HireDateEnum hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


  public EmployeeListManyEmployeesSortParameter endDate(EndDateEnum endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EndDateEnum getEndDate() {
    return endDate;
  }


  public void setEndDate(EndDateEnum endDate) {
    
    
    
    this.endDate = endDate;
  }


  public EmployeeListManyEmployeesSortParameter hasOccupationalPension(HasOccupationalPensionEnum hasOccupationalPension) {
    
    
    
    
    this.hasOccupationalPension = hasOccupationalPension;
    return this;
  }

   /**
   * Get hasOccupationalPension
   * @return hasOccupationalPension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public HasOccupationalPensionEnum getHasOccupationalPension() {
    return hasOccupationalPension;
  }


  public void setHasOccupationalPension(HasOccupationalPensionEnum hasOccupationalPension) {
    
    
    
    this.hasOccupationalPension = hasOccupationalPension;
  }


  public EmployeeListManyEmployeesSortParameter privateEmail(PrivateEmailEnum privateEmail) {
    
    
    
    
    this.privateEmail = privateEmail;
    return this;
  }

   /**
   * Get privateEmail
   * @return privateEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PrivateEmailEnum getPrivateEmail() {
    return privateEmail;
  }


  public void setPrivateEmail(PrivateEmailEnum privateEmail) {
    
    
    
    this.privateEmail = privateEmail;
  }


  public EmployeeListManyEmployeesSortParameter firstName(FirstNameEnum firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FirstNameEnum getFirstName() {
    return firstName;
  }


  public void setFirstName(FirstNameEnum firstName) {
    
    
    
    this.firstName = firstName;
  }


  public EmployeeListManyEmployeesSortParameter lastName(LastNameEnum lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LastNameEnum getLastName() {
    return lastName;
  }


  public void setLastName(LastNameEnum lastName) {
    
    
    
    this.lastName = lastName;
  }


  public EmployeeListManyEmployeesSortParameter ssn(SsnEnum ssn) {
    
    
    
    
    this.ssn = ssn;
    return this;
  }

   /**
   * Get ssn
   * @return ssn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SsnEnum getSsn() {
    return ssn;
  }


  public void setSsn(SsnEnum ssn) {
    
    
    
    this.ssn = ssn;
  }


  public EmployeeListManyEmployeesSortParameter privatePhone(PrivatePhoneEnum privatePhone) {
    
    
    
    
    this.privatePhone = privatePhone;
    return this;
  }

   /**
   * Get privatePhone
   * @return privatePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PrivatePhoneEnum getPrivatePhone() {
    return privatePhone;
  }


  public void setPrivatePhone(PrivatePhoneEnum privatePhone) {
    
    
    
    this.privatePhone = privatePhone;
  }


  public EmployeeListManyEmployeesSortParameter privatePhoneSanitized(PrivatePhoneSanitizedEnum privatePhoneSanitized) {
    
    
    
    
    this.privatePhoneSanitized = privatePhoneSanitized;
    return this;
  }

   /**
   * Get privatePhoneSanitized
   * @return privatePhoneSanitized
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PrivatePhoneSanitizedEnum getPrivatePhoneSanitized() {
    return privatePhoneSanitized;
  }


  public void setPrivatePhoneSanitized(PrivatePhoneSanitizedEnum privatePhoneSanitized) {
    
    
    
    this.privatePhoneSanitized = privatePhoneSanitized;
  }


  public EmployeeListManyEmployeesSortParameter birthDate(BirthDateEnum birthDate) {
    
    
    
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * Get birthDate
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BirthDateEnum getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(BirthDateEnum birthDate) {
    
    
    
    this.birthDate = birthDate;
  }


  public EmployeeListManyEmployeesSortParameter age(AgeEnum age) {
    
    
    
    
    this.age = age;
    return this;
  }

   /**
   * Get age
   * @return age
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AgeEnum getAge() {
    return age;
  }


  public void setAge(AgeEnum age) {
    
    
    
    this.age = age;
  }


  public EmployeeListManyEmployeesSortParameter nationality(NationalityEnum nationality) {
    
    
    
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Get nationality
   * @return nationality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NationalityEnum getNationality() {
    return nationality;
  }


  public void setNationality(NationalityEnum nationality) {
    
    
    
    this.nationality = nationality;
  }


  public EmployeeListManyEmployeesSortParameter gender(GenderEnum gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GenderEnum getGender() {
    return gender;
  }


  public void setGender(GenderEnum gender) {
    
    
    
    this.gender = gender;
  }


  public EmployeeListManyEmployeesSortParameter pronoun(PronounEnum pronoun) {
    
    
    
    
    this.pronoun = pronoun;
    return this;
  }

   /**
   * Get pronoun
   * @return pronoun
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PronounEnum getPronoun() {
    return pronoun;
  }


  public void setPronoun(PronounEnum pronoun) {
    
    
    
    this.pronoun = pronoun;
  }


  public EmployeeListManyEmployeesSortParameter created(CreatedEnum created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreatedEnum getCreated() {
    return created;
  }


  public void setCreated(CreatedEnum created) {
    
    
    
    this.created = created;
  }


  public EmployeeListManyEmployeesSortParameter updated(UpdatedEnum updated) {
    
    
    
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UpdatedEnum getUpdated() {
    return updated;
  }


  public void setUpdated(UpdatedEnum updated) {
    
    
    
    this.updated = updated;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeListManyEmployeesSortParameter instance itself
   */
  public EmployeeListManyEmployeesSortParameter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeListManyEmployeesSortParameter employeeListManyEmployeesSortParameter = (EmployeeListManyEmployeesSortParameter) o;
    return Objects.equals(this.title, employeeListManyEmployeesSortParameter.title) &&
        Objects.equals(this.id, employeeListManyEmployeesSortParameter.id) &&
        Objects.equals(this.active, employeeListManyEmployeesSortParameter.active) &&
        Objects.equals(this.companyId, employeeListManyEmployeesSortParameter.companyId) &&
        Objects.equals(this.officeId, employeeListManyEmployeesSortParameter.officeId) &&
        Objects.equals(this.managerEmployeeId, employeeListManyEmployeesSortParameter.managerEmployeeId) &&
        Objects.equals(this.departmentId, employeeListManyEmployeesSortParameter.departmentId) &&
        Objects.equals(this.costCenterId, employeeListManyEmployeesSortParameter.costCenterId) &&
        Objects.equals(this.employmentId, employeeListManyEmployeesSortParameter.employmentId) &&
        Objects.equals(this.employmentTypeId, employeeListManyEmployeesSortParameter.employmentTypeId) &&
        Objects.equals(this.employmentCountry, employeeListManyEmployeesSortParameter.employmentCountry) &&
        Objects.equals(this.compensationId, employeeListManyEmployeesSortParameter.compensationId) &&
        Objects.equals(this.userId, employeeListManyEmployeesSortParameter.userId) &&
        Objects.equals(this.userName, employeeListManyEmployeesSortParameter.userName) &&
        Objects.equals(this.division, employeeListManyEmployeesSortParameter.division) &&
        Objects.equals(this.organization, employeeListManyEmployeesSortParameter.organization) &&
        Objects.equals(this.employeeNumber, employeeListManyEmployeesSortParameter.employeeNumber) &&
        Objects.equals(this.workEmail, employeeListManyEmployeesSortParameter.workEmail) &&
        Objects.equals(this.workPhone, employeeListManyEmployeesSortParameter.workPhone) &&
        Objects.equals(this.workPhoneSanitized, employeeListManyEmployeesSortParameter.workPhoneSanitized) &&
        Objects.equals(this.hireDate, employeeListManyEmployeesSortParameter.hireDate) &&
        Objects.equals(this.endDate, employeeListManyEmployeesSortParameter.endDate) &&
        Objects.equals(this.hasOccupationalPension, employeeListManyEmployeesSortParameter.hasOccupationalPension) &&
        Objects.equals(this.privateEmail, employeeListManyEmployeesSortParameter.privateEmail) &&
        Objects.equals(this.firstName, employeeListManyEmployeesSortParameter.firstName) &&
        Objects.equals(this.lastName, employeeListManyEmployeesSortParameter.lastName) &&
        Objects.equals(this.ssn, employeeListManyEmployeesSortParameter.ssn) &&
        Objects.equals(this.privatePhone, employeeListManyEmployeesSortParameter.privatePhone) &&
        Objects.equals(this.privatePhoneSanitized, employeeListManyEmployeesSortParameter.privatePhoneSanitized) &&
        Objects.equals(this.birthDate, employeeListManyEmployeesSortParameter.birthDate) &&
        Objects.equals(this.age, employeeListManyEmployeesSortParameter.age) &&
        Objects.equals(this.nationality, employeeListManyEmployeesSortParameter.nationality) &&
        Objects.equals(this.gender, employeeListManyEmployeesSortParameter.gender) &&
        Objects.equals(this.pronoun, employeeListManyEmployeesSortParameter.pronoun) &&
        Objects.equals(this.created, employeeListManyEmployeesSortParameter.created) &&
        Objects.equals(this.updated, employeeListManyEmployeesSortParameter.updated)&&
        Objects.equals(this.additionalProperties, employeeListManyEmployeesSortParameter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, id, active, companyId, officeId, managerEmployeeId, departmentId, costCenterId, employmentId, employmentTypeId, employmentCountry, compensationId, userId, userName, division, organization, employeeNumber, workEmail, workPhone, workPhoneSanitized, hireDate, endDate, hasOccupationalPension, privateEmail, firstName, lastName, ssn, privatePhone, privatePhoneSanitized, birthDate, age, nationality, gender, pronoun, created, updated, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeListManyEmployeesSortParameter {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    managerEmployeeId: ").append(toIndentedString(managerEmployeeId)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    costCenterId: ").append(toIndentedString(costCenterId)).append("\n");
    sb.append("    employmentId: ").append(toIndentedString(employmentId)).append("\n");
    sb.append("    employmentTypeId: ").append(toIndentedString(employmentTypeId)).append("\n");
    sb.append("    employmentCountry: ").append(toIndentedString(employmentCountry)).append("\n");
    sb.append("    compensationId: ").append(toIndentedString(compensationId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    workEmail: ").append(toIndentedString(workEmail)).append("\n");
    sb.append("    workPhone: ").append(toIndentedString(workPhone)).append("\n");
    sb.append("    workPhoneSanitized: ").append(toIndentedString(workPhoneSanitized)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    hasOccupationalPension: ").append(toIndentedString(hasOccupationalPension)).append("\n");
    sb.append("    privateEmail: ").append(toIndentedString(privateEmail)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    privatePhone: ").append(toIndentedString(privatePhone)).append("\n");
    sb.append("    privatePhoneSanitized: ").append(toIndentedString(privatePhoneSanitized)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    pronoun: ").append(toIndentedString(pronoun)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("id");
    openapiFields.add("active");
    openapiFields.add("companyId");
    openapiFields.add("officeId");
    openapiFields.add("managerEmployeeId");
    openapiFields.add("departmentId");
    openapiFields.add("costCenterId");
    openapiFields.add("employmentId");
    openapiFields.add("employmentTypeId");
    openapiFields.add("employmentCountry");
    openapiFields.add("compensationId");
    openapiFields.add("userId");
    openapiFields.add("userName");
    openapiFields.add("division");
    openapiFields.add("organization");
    openapiFields.add("employeeNumber");
    openapiFields.add("workEmail");
    openapiFields.add("workPhone");
    openapiFields.add("workPhoneSanitized");
    openapiFields.add("hireDate");
    openapiFields.add("endDate");
    openapiFields.add("hasOccupationalPension");
    openapiFields.add("privateEmail");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("ssn");
    openapiFields.add("privatePhone");
    openapiFields.add("privatePhoneSanitized");
    openapiFields.add("birthDate");
    openapiFields.add("age");
    openapiFields.add("nationality");
    openapiFields.add("gender");
    openapiFields.add("pronoun");
    openapiFields.add("created");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeListManyEmployeesSortParameter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeListManyEmployeesSortParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeListManyEmployeesSortParameter is not found in the empty JSON string", EmployeeListManyEmployeesSortParameter.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("active") != null && !jsonObj.get("active").isJsonNull()) && !jsonObj.get("active").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active").toString()));
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      if ((jsonObj.get("officeId") != null && !jsonObj.get("officeId").isJsonNull()) && !jsonObj.get("officeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeId").toString()));
      }
      if ((jsonObj.get("managerEmployeeId") != null && !jsonObj.get("managerEmployeeId").isJsonNull()) && !jsonObj.get("managerEmployeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managerEmployeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managerEmployeeId").toString()));
      }
      if ((jsonObj.get("departmentId") != null && !jsonObj.get("departmentId").isJsonNull()) && !jsonObj.get("departmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departmentId").toString()));
      }
      if ((jsonObj.get("costCenterId") != null && !jsonObj.get("costCenterId").isJsonNull()) && !jsonObj.get("costCenterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenterId").toString()));
      }
      if ((jsonObj.get("employmentId") != null && !jsonObj.get("employmentId").isJsonNull()) && !jsonObj.get("employmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employmentId").toString()));
      }
      if ((jsonObj.get("employmentTypeId") != null && !jsonObj.get("employmentTypeId").isJsonNull()) && !jsonObj.get("employmentTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employmentTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employmentTypeId").toString()));
      }
      if ((jsonObj.get("employmentCountry") != null && !jsonObj.get("employmentCountry").isJsonNull()) && !jsonObj.get("employmentCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employmentCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employmentCountry").toString()));
      }
      if ((jsonObj.get("compensationId") != null && !jsonObj.get("compensationId").isJsonNull()) && !jsonObj.get("compensationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compensationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compensationId").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if ((jsonObj.get("division") != null && !jsonObj.get("division").isJsonNull()) && !jsonObj.get("division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("division").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if ((jsonObj.get("workEmail") != null && !jsonObj.get("workEmail").isJsonNull()) && !jsonObj.get("workEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workEmail").toString()));
      }
      if ((jsonObj.get("workPhone") != null && !jsonObj.get("workPhone").isJsonNull()) && !jsonObj.get("workPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhone").toString()));
      }
      if ((jsonObj.get("workPhoneSanitized") != null && !jsonObj.get("workPhoneSanitized").isJsonNull()) && !jsonObj.get("workPhoneSanitized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhoneSanitized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhoneSanitized").toString()));
      }
      if ((jsonObj.get("hireDate") != null && !jsonObj.get("hireDate").isJsonNull()) && !jsonObj.get("hireDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hireDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hireDate").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("hasOccupationalPension") != null && !jsonObj.get("hasOccupationalPension").isJsonNull()) && !jsonObj.get("hasOccupationalPension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasOccupationalPension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasOccupationalPension").toString()));
      }
      if ((jsonObj.get("privateEmail") != null && !jsonObj.get("privateEmail").isJsonNull()) && !jsonObj.get("privateEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateEmail").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("privatePhone") != null && !jsonObj.get("privatePhone").isJsonNull()) && !jsonObj.get("privatePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privatePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privatePhone").toString()));
      }
      if ((jsonObj.get("privatePhoneSanitized") != null && !jsonObj.get("privatePhoneSanitized").isJsonNull()) && !jsonObj.get("privatePhoneSanitized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privatePhoneSanitized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privatePhoneSanitized").toString()));
      }
      if ((jsonObj.get("birthDate") != null && !jsonObj.get("birthDate").isJsonNull()) && !jsonObj.get("birthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthDate").toString()));
      }
      if ((jsonObj.get("age") != null && !jsonObj.get("age").isJsonNull()) && !jsonObj.get("age").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `age` to be a primitive type in the JSON string but got `%s`", jsonObj.get("age").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("pronoun") != null && !jsonObj.get("pronoun").isJsonNull()) && !jsonObj.get("pronoun").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pronoun` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pronoun").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeListManyEmployeesSortParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeListManyEmployeesSortParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeListManyEmployeesSortParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeListManyEmployeesSortParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeListManyEmployeesSortParameter>() {
           @Override
           public void write(JsonWriter out, EmployeeListManyEmployeesSortParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeListManyEmployeesSortParameter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeListManyEmployeesSortParameter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeListManyEmployeesSortParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeListManyEmployeesSortParameter
  * @throws IOException if the JSON string is invalid with respect to EmployeeListManyEmployeesSortParameter
  */
  public static EmployeeListManyEmployeesSortParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeListManyEmployeesSortParameter.class);
  }

 /**
  * Convert an instance of EmployeeListManyEmployeesSortParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

