/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompanyListManyCompaniesFiltersParameterId
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompanyListManyCompaniesFiltersParameterId {
  public static final String SERIALIZED_NAME_$_EQ = "$eq";
  @SerializedName(SERIALIZED_NAME_$_EQ)
  private String $eq;

  public static final String SERIALIZED_NAME_$_NEQ = "$neq";
  @SerializedName(SERIALIZED_NAME_$_NEQ)
  private String $neq;

  public static final String SERIALIZED_NAME_$_GT = "$gt";
  @SerializedName(SERIALIZED_NAME_$_GT)
  private String $gt;

  public static final String SERIALIZED_NAME_$_LT = "$lt";
  @SerializedName(SERIALIZED_NAME_$_LT)
  private String $lt;

  public static final String SERIALIZED_NAME_$_GTE = "$gte";
  @SerializedName(SERIALIZED_NAME_$_GTE)
  private String $gte;

  public static final String SERIALIZED_NAME_$_LTE = "$lte";
  @SerializedName(SERIALIZED_NAME_$_LTE)
  private String $lte;

  public static final String SERIALIZED_NAME_$_IN = "$in";
  @SerializedName(SERIALIZED_NAME_$_IN)
  private List<String> $in = null;

  public static final String SERIALIZED_NAME_$_NIN = "$nin";
  @SerializedName(SERIALIZED_NAME_$_NIN)
  private List<String> $nin = null;

  public static final String SERIALIZED_NAME_$_BETWEEN = "$between";
  @SerializedName(SERIALIZED_NAME_$_BETWEEN)
  private List<String> $between = null;

  public static final String SERIALIZED_NAME_$_ALL = "$all";
  @SerializedName(SERIALIZED_NAME_$_ALL)
  private String $all;

  public CompanyListManyCompaniesFiltersParameterId() {
  }

  public CompanyListManyCompaniesFiltersParameterId $eq(String $eq) {
    
    
    
    
    this.$eq = $eq;
    return this;
  }

   /**
   * Get $eq
   * @return $eq
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get$Eq() {
    return $eq;
  }


  public void set$Eq(String $eq) {
    
    
    
    this.$eq = $eq;
  }


  public CompanyListManyCompaniesFiltersParameterId $neq(String $neq) {
    
    
    
    
    this.$neq = $neq;
    return this;
  }

   /**
   * Get $neq
   * @return $neq
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get$Neq() {
    return $neq;
  }


  public void set$Neq(String $neq) {
    
    
    
    this.$neq = $neq;
  }


  public CompanyListManyCompaniesFiltersParameterId $gt(String $gt) {
    
    
    
    
    this.$gt = $gt;
    return this;
  }

   /**
   * Get $gt
   * @return $gt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get$Gt() {
    return $gt;
  }


  public void set$Gt(String $gt) {
    
    
    
    this.$gt = $gt;
  }


  public CompanyListManyCompaniesFiltersParameterId $lt(String $lt) {
    
    
    
    
    this.$lt = $lt;
    return this;
  }

   /**
   * Get $lt
   * @return $lt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get$Lt() {
    return $lt;
  }


  public void set$Lt(String $lt) {
    
    
    
    this.$lt = $lt;
  }


  public CompanyListManyCompaniesFiltersParameterId $gte(String $gte) {
    
    
    
    
    this.$gte = $gte;
    return this;
  }

   /**
   * Get $gte
   * @return $gte
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get$Gte() {
    return $gte;
  }


  public void set$Gte(String $gte) {
    
    
    
    this.$gte = $gte;
  }


  public CompanyListManyCompaniesFiltersParameterId $lte(String $lte) {
    
    
    
    
    this.$lte = $lte;
    return this;
  }

   /**
   * Get $lte
   * @return $lte
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get$Lte() {
    return $lte;
  }


  public void set$Lte(String $lte) {
    
    
    
    this.$lte = $lte;
  }


  public CompanyListManyCompaniesFiltersParameterId $in(List<String> $in) {
    
    
    
    
    this.$in = $in;
    return this;
  }

  public CompanyListManyCompaniesFiltersParameterId add$InItem(String $inItem) {
    if (this.$in == null) {
      this.$in = new ArrayList<>();
    }
    this.$in.add($inItem);
    return this;
  }

   /**
   * Get $in
   * @return $in
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> get$In() {
    return $in;
  }


  public void set$In(List<String> $in) {
    
    
    
    this.$in = $in;
  }


  public CompanyListManyCompaniesFiltersParameterId $nin(List<String> $nin) {
    
    
    
    
    this.$nin = $nin;
    return this;
  }

  public CompanyListManyCompaniesFiltersParameterId add$NinItem(String $ninItem) {
    if (this.$nin == null) {
      this.$nin = new ArrayList<>();
    }
    this.$nin.add($ninItem);
    return this;
  }

   /**
   * Get $nin
   * @return $nin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> get$Nin() {
    return $nin;
  }


  public void set$Nin(List<String> $nin) {
    
    
    
    this.$nin = $nin;
  }


  public CompanyListManyCompaniesFiltersParameterId $between(List<String> $between) {
    
    
    
    
    this.$between = $between;
    return this;
  }

  public CompanyListManyCompaniesFiltersParameterId add$BetweenItem(String $betweenItem) {
    if (this.$between == null) {
      this.$between = new ArrayList<>();
    }
    this.$between.add($betweenItem);
    return this;
  }

   /**
   * Get $between
   * @return $between
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> get$Between() {
    return $between;
  }


  public void set$Between(List<String> $between) {
    
    
    
    this.$between = $between;
  }


  public CompanyListManyCompaniesFiltersParameterId $all(String $all) {
    
    
    
    
    this.$all = $all;
    return this;
  }

   /**
   * Get $all
   * @return $all
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get$All() {
    return $all;
  }


  public void set$All(String $all) {
    
    
    
    this.$all = $all;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompanyListManyCompaniesFiltersParameterId instance itself
   */
  public CompanyListManyCompaniesFiltersParameterId putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyListManyCompaniesFiltersParameterId companyListManyCompaniesFiltersParameterId = (CompanyListManyCompaniesFiltersParameterId) o;
    return Objects.equals(this.$eq, companyListManyCompaniesFiltersParameterId.$eq) &&
        Objects.equals(this.$neq, companyListManyCompaniesFiltersParameterId.$neq) &&
        Objects.equals(this.$gt, companyListManyCompaniesFiltersParameterId.$gt) &&
        Objects.equals(this.$lt, companyListManyCompaniesFiltersParameterId.$lt) &&
        Objects.equals(this.$gte, companyListManyCompaniesFiltersParameterId.$gte) &&
        Objects.equals(this.$lte, companyListManyCompaniesFiltersParameterId.$lte) &&
        Objects.equals(this.$in, companyListManyCompaniesFiltersParameterId.$in) &&
        Objects.equals(this.$nin, companyListManyCompaniesFiltersParameterId.$nin) &&
        Objects.equals(this.$between, companyListManyCompaniesFiltersParameterId.$between) &&
        Objects.equals(this.$all, companyListManyCompaniesFiltersParameterId.$all)&&
        Objects.equals(this.additionalProperties, companyListManyCompaniesFiltersParameterId.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash($eq, $neq, $gt, $lt, $gte, $lte, $in, $nin, $between, $all, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyListManyCompaniesFiltersParameterId {\n");
    sb.append("    $eq: ").append(toIndentedString($eq)).append("\n");
    sb.append("    $neq: ").append(toIndentedString($neq)).append("\n");
    sb.append("    $gt: ").append(toIndentedString($gt)).append("\n");
    sb.append("    $lt: ").append(toIndentedString($lt)).append("\n");
    sb.append("    $gte: ").append(toIndentedString($gte)).append("\n");
    sb.append("    $lte: ").append(toIndentedString($lte)).append("\n");
    sb.append("    $in: ").append(toIndentedString($in)).append("\n");
    sb.append("    $nin: ").append(toIndentedString($nin)).append("\n");
    sb.append("    $between: ").append(toIndentedString($between)).append("\n");
    sb.append("    $all: ").append(toIndentedString($all)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$eq");
    openapiFields.add("$neq");
    openapiFields.add("$gt");
    openapiFields.add("$lt");
    openapiFields.add("$gte");
    openapiFields.add("$lte");
    openapiFields.add("$in");
    openapiFields.add("$nin");
    openapiFields.add("$between");
    openapiFields.add("$all");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompanyListManyCompaniesFiltersParameterId
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompanyListManyCompaniesFiltersParameterId.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyListManyCompaniesFiltersParameterId is not found in the empty JSON string", CompanyListManyCompaniesFiltersParameterId.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("$eq") != null && !jsonObj.get("$eq").isJsonNull()) && !jsonObj.get("$eq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$eq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$eq").toString()));
      }
      if ((jsonObj.get("$neq") != null && !jsonObj.get("$neq").isJsonNull()) && !jsonObj.get("$neq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$neq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$neq").toString()));
      }
      if ((jsonObj.get("$gt") != null && !jsonObj.get("$gt").isJsonNull()) && !jsonObj.get("$gt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$gt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$gt").toString()));
      }
      if ((jsonObj.get("$lt") != null && !jsonObj.get("$lt").isJsonNull()) && !jsonObj.get("$lt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$lt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$lt").toString()));
      }
      if ((jsonObj.get("$gte") != null && !jsonObj.get("$gte").isJsonNull()) && !jsonObj.get("$gte").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$gte` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$gte").toString()));
      }
      if ((jsonObj.get("$lte") != null && !jsonObj.get("$lte").isJsonNull()) && !jsonObj.get("$lte").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$lte` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$lte").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("$in") != null && !jsonObj.get("$in").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `$in` to be an array in the JSON string but got `%s`", jsonObj.get("$in").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("$nin") != null && !jsonObj.get("$nin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `$nin` to be an array in the JSON string but got `%s`", jsonObj.get("$nin").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("$between") != null && !jsonObj.get("$between").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `$between` to be an array in the JSON string but got `%s`", jsonObj.get("$between").toString()));
      }
      if ((jsonObj.get("$all") != null && !jsonObj.get("$all").isJsonNull()) && !jsonObj.get("$all").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$all` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$all").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyListManyCompaniesFiltersParameterId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyListManyCompaniesFiltersParameterId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyListManyCompaniesFiltersParameterId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyListManyCompaniesFiltersParameterId.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyListManyCompaniesFiltersParameterId>() {
           @Override
           public void write(JsonWriter out, CompanyListManyCompaniesFiltersParameterId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyListManyCompaniesFiltersParameterId read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompanyListManyCompaniesFiltersParameterId instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompanyListManyCompaniesFiltersParameterId given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompanyListManyCompaniesFiltersParameterId
  * @throws IOException if the JSON string is invalid with respect to CompanyListManyCompaniesFiltersParameterId
  */
  public static CompanyListManyCompaniesFiltersParameterId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyListManyCompaniesFiltersParameterId.class);
  }

 /**
  * Convert an instance of CompanyListManyCompaniesFiltersParameterId to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

