/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CostCenterGetOneResponseMapped;
import com.konfigthis.client.model.CostCenterResponseMapped;
import com.konfigthis.client.model.CostCentersGetManyResponseMapped;
import com.konfigthis.client.model.CostcenterGetManyFiltersParameter;
import com.konfigthis.client.model.CostcenterGetManySortParameter;
import com.konfigthis.client.model.CreateCostCenterRequest;
import com.konfigthis.client.model.EmptyResponseMapped;
import com.konfigthis.client.model.UpdateCostCenterRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CostCenterApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CostCenterApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CostCenterApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOneCostCenterCall(CreateCostCenterRequest createCostCenterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCostCenterRequest;

        // create path and map variables
        String localVarPath = "/cost-center";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneCostCenterValidateBeforeCall(CreateCostCenterRequest createCostCenterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCostCenterRequest' is set
        if (createCostCenterRequest == null) {
            throw new ApiException("Missing the required parameter 'createCostCenterRequest' when calling createOneCostCenter(Async)");
        }

        return createOneCostCenterCall(createCostCenterRequest, _callback);

    }


    private ApiResponse<CostCenterResponseMapped> createOneCostCenterWithHttpInfo(CreateCostCenterRequest createCostCenterRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneCostCenterValidateBeforeCall(createCostCenterRequest, null);
        Type localVarReturnType = new TypeToken<CostCenterResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneCostCenterAsync(CreateCostCenterRequest createCostCenterRequest, final ApiCallback<CostCenterResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneCostCenterValidateBeforeCall(createCostCenterRequest, _callback);
        Type localVarReturnType = new TypeToken<CostCenterResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneCostCenterRequestBuilder {
        private final String code;
        private String name;

        private CreateOneCostCenterRequestBuilder(String code) {
            this.code = code;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return CreateOneCostCenterRequestBuilder
         */
        public CreateOneCostCenterRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createOneCostCenter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCostCenterRequest createCostCenterRequest = buildBodyParams();
            return createOneCostCenterCall(createCostCenterRequest, _callback);
        }

        private CreateCostCenterRequest buildBodyParams() {
            CreateCostCenterRequest createCostCenterRequest = new CreateCostCenterRequest();
            createCostCenterRequest.code(this.code);
            createCostCenterRequest.name(this.name);
            return createCostCenterRequest;
        }

        /**
         * Execute createOneCostCenter request
         * @return CostCenterResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostCenterResponseMapped execute() throws ApiException {
            CreateCostCenterRequest createCostCenterRequest = buildBodyParams();
            ApiResponse<CostCenterResponseMapped> localVarResp = createOneCostCenterWithHttpInfo(createCostCenterRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOneCostCenter request with HTTP info returned
         * @return ApiResponse&lt;CostCenterResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostCenterResponseMapped> executeWithHttpInfo() throws ApiException {
            CreateCostCenterRequest createCostCenterRequest = buildBodyParams();
            return createOneCostCenterWithHttpInfo(createCostCenterRequest);
        }

        /**
         * Execute createOneCostCenter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostCenterResponseMapped> _callback) throws ApiException {
            CreateCostCenterRequest createCostCenterRequest = buildBodyParams();
            return createOneCostCenterAsync(createCostCenterRequest, _callback);
        }
    }

    /**
     * Create One Cost Center
     * Create One Cost Center
     * @param createCostCenterRequest  (required)
     * @return CreateOneCostCenterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneCostCenterRequestBuilder createOneCostCenter(String code) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        return new CreateOneCostCenterRequestBuilder(code);
    }
    private okhttp3.Call deleteOneCostCenterCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cost-center/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOneCostCenterValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOneCostCenter(Async)");
        }

        return deleteOneCostCenterCall(id, _callback);

    }


    private ApiResponse<EmptyResponseMapped> deleteOneCostCenterWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOneCostCenterValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOneCostCenterAsync(String id, final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOneCostCenterValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOneCostCenterRequestBuilder {
        private final String id;

        private DeleteOneCostCenterRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteOneCostCenter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOneCostCenterCall(id, _callback);
        }


        /**
         * Execute deleteOneCostCenter request
         * @return EmptyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponseMapped execute() throws ApiException {
            ApiResponse<EmptyResponseMapped> localVarResp = deleteOneCostCenterWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOneCostCenter request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponseMapped> executeWithHttpInfo() throws ApiException {
            return deleteOneCostCenterWithHttpInfo(id);
        }

        /**
         * Execute deleteOneCostCenter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {
            return deleteOneCostCenterAsync(id, _callback);
        }
    }

    /**
     * Delete One Cost Center
     * Delete One Cost Center
     * @param id Resource Id (required)
     * @return DeleteOneCostCenterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOneCostCenterRequestBuilder deleteOneCostCenter(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteOneCostCenterRequestBuilder(id);
    }
    private okhttp3.Call getManyCall(List<String> select, CostcenterGetManyFiltersParameter filters, Integer limit, Integer offset, CostcenterGetManySortParameter sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cost-center";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManyValidateBeforeCall(List<String> select, CostcenterGetManyFiltersParameter filters, Integer limit, Integer offset, CostcenterGetManySortParameter sort, final ApiCallback _callback) throws ApiException {
        return getManyCall(select, filters, limit, offset, sort, _callback);

    }


    private ApiResponse<CostCentersGetManyResponseMapped> getManyWithHttpInfo(List<String> select, CostcenterGetManyFiltersParameter filters, Integer limit, Integer offset, CostcenterGetManySortParameter sort) throws ApiException {
        okhttp3.Call localVarCall = getManyValidateBeforeCall(select, filters, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<CostCentersGetManyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getManyAsync(List<String> select, CostcenterGetManyFiltersParameter filters, Integer limit, Integer offset, CostcenterGetManySortParameter sort, final ApiCallback<CostCentersGetManyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManyValidateBeforeCall(select, filters, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<CostCentersGetManyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetManyRequestBuilder {
        private List<String> select;
        private CostcenterGetManyFiltersParameter filters;
        private Integer limit;
        private Integer offset;
        private CostcenterGetManySortParameter sort;

        private GetManyRequestBuilder() {
        }

        /**
         * Set select
         * @param select Select Cost Center fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set filters
         * @param filters Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder filters(CostcenterGetManyFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit amount of received Cost Centers. (e.g. &#x60;limit&#x3D;20&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset amount of received Cost Centers. (e.g. &#x60;offset&#x3D;20&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort received Cost Centers by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder sort(CostcenterGetManySortParameter sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getMany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getManyCall(select, filters, limit, offset, sort, _callback);
        }


        /**
         * Execute getMany request
         * @return CostCentersGetManyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostCentersGetManyResponseMapped execute() throws ApiException {
            ApiResponse<CostCentersGetManyResponseMapped> localVarResp = getManyWithHttpInfo(select, filters, limit, offset, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMany request with HTTP info returned
         * @return ApiResponse&lt;CostCentersGetManyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostCentersGetManyResponseMapped> executeWithHttpInfo() throws ApiException {
            return getManyWithHttpInfo(select, filters, limit, offset, sort);
        }

        /**
         * Execute getMany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostCentersGetManyResponseMapped> _callback) throws ApiException {
            return getManyAsync(select, filters, limit, offset, sort, _callback);
        }
    }

    /**
     * Get Many Cost Centers
     * Get Many Cost Centers
     * @return GetManyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetManyRequestBuilder getMany() throws IllegalArgumentException {
        return new GetManyRequestBuilder();
    }
    private okhttp3.Call getOneCostCenterCall(String id, List<String> select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cost-center/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneCostCenterValidateBeforeCall(String id, List<String> select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOneCostCenter(Async)");
        }

        return getOneCostCenterCall(id, select, _callback);

    }


    private ApiResponse<CostCenterGetOneResponseMapped> getOneCostCenterWithHttpInfo(String id, List<String> select) throws ApiException {
        okhttp3.Call localVarCall = getOneCostCenterValidateBeforeCall(id, select, null);
        Type localVarReturnType = new TypeToken<CostCenterGetOneResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneCostCenterAsync(String id, List<String> select, final ApiCallback<CostCenterGetOneResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneCostCenterValidateBeforeCall(id, select, _callback);
        Type localVarReturnType = new TypeToken<CostCenterGetOneResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneCostCenterRequestBuilder {
        private final String id;
        private List<String> select;

        private GetOneCostCenterRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set select
         * @param select Select Cost Center fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetOneCostCenterRequestBuilder
         */
        public GetOneCostCenterRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Build call for getOneCostCenter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneCostCenterCall(id, select, _callback);
        }


        /**
         * Execute getOneCostCenter request
         * @return CostCenterGetOneResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostCenterGetOneResponseMapped execute() throws ApiException {
            ApiResponse<CostCenterGetOneResponseMapped> localVarResp = getOneCostCenterWithHttpInfo(id, select);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOneCostCenter request with HTTP info returned
         * @return ApiResponse&lt;CostCenterGetOneResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostCenterGetOneResponseMapped> executeWithHttpInfo() throws ApiException {
            return getOneCostCenterWithHttpInfo(id, select);
        }

        /**
         * Execute getOneCostCenter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostCenterGetOneResponseMapped> _callback) throws ApiException {
            return getOneCostCenterAsync(id, select, _callback);
        }
    }

    /**
     * Get One Cost Center
     * Get One Cost Center
     * @param id Resource Id (required)
     * @return GetOneCostCenterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetOneCostCenterRequestBuilder getOneCostCenter(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOneCostCenterRequestBuilder(id);
    }
    private okhttp3.Call replaceOneCostCenterCall(String id, UpdateCostCenterRequest updateCostCenterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCostCenterRequest;

        // create path and map variables
        String localVarPath = "/cost-center/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceOneCostCenterValidateBeforeCall(String id, UpdateCostCenterRequest updateCostCenterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceOneCostCenter(Async)");
        }

        // verify the required parameter 'updateCostCenterRequest' is set
        if (updateCostCenterRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCostCenterRequest' when calling replaceOneCostCenter(Async)");
        }

        return replaceOneCostCenterCall(id, updateCostCenterRequest, _callback);

    }


    private ApiResponse<CostCenterResponseMapped> replaceOneCostCenterWithHttpInfo(String id, UpdateCostCenterRequest updateCostCenterRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceOneCostCenterValidateBeforeCall(id, updateCostCenterRequest, null);
        Type localVarReturnType = new TypeToken<CostCenterResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceOneCostCenterAsync(String id, UpdateCostCenterRequest updateCostCenterRequest, final ApiCallback<CostCenterResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceOneCostCenterValidateBeforeCall(id, updateCostCenterRequest, _callback);
        Type localVarReturnType = new TypeToken<CostCenterResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceOneCostCenterRequestBuilder {
        private final String id;
        private String code;
        private String name;

        private ReplaceOneCostCenterRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set code
         * @param code  (optional)
         * @return ReplaceOneCostCenterRequestBuilder
         */
        public ReplaceOneCostCenterRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return ReplaceOneCostCenterRequestBuilder
         */
        public ReplaceOneCostCenterRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for replaceOneCostCenter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCostCenterRequest updateCostCenterRequest = buildBodyParams();
            return replaceOneCostCenterCall(id, updateCostCenterRequest, _callback);
        }

        private UpdateCostCenterRequest buildBodyParams() {
            UpdateCostCenterRequest updateCostCenterRequest = new UpdateCostCenterRequest();
            updateCostCenterRequest.code(this.code);
            updateCostCenterRequest.name(this.name);
            return updateCostCenterRequest;
        }

        /**
         * Execute replaceOneCostCenter request
         * @return CostCenterResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostCenterResponseMapped execute() throws ApiException {
            UpdateCostCenterRequest updateCostCenterRequest = buildBodyParams();
            ApiResponse<CostCenterResponseMapped> localVarResp = replaceOneCostCenterWithHttpInfo(id, updateCostCenterRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceOneCostCenter request with HTTP info returned
         * @return ApiResponse&lt;CostCenterResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostCenterResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateCostCenterRequest updateCostCenterRequest = buildBodyParams();
            return replaceOneCostCenterWithHttpInfo(id, updateCostCenterRequest);
        }

        /**
         * Execute replaceOneCostCenter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostCenterResponseMapped> _callback) throws ApiException {
            UpdateCostCenterRequest updateCostCenterRequest = buildBodyParams();
            return replaceOneCostCenterAsync(id, updateCostCenterRequest, _callback);
        }
    }

    /**
     * Replace One Cost Center
     * Replace One Cost Center
     * @param id Resource Id (required)
     * @param updateCostCenterRequest  (required)
     * @return ReplaceOneCostCenterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceOneCostCenterRequestBuilder replaceOneCostCenter(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReplaceOneCostCenterRequestBuilder(id);
    }
    private okhttp3.Call updateOneCostCenterCall(String id, UpdateCostCenterRequest updateCostCenterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCostCenterRequest;

        // create path and map variables
        String localVarPath = "/cost-center/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOneCostCenterValidateBeforeCall(String id, UpdateCostCenterRequest updateCostCenterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOneCostCenter(Async)");
        }

        // verify the required parameter 'updateCostCenterRequest' is set
        if (updateCostCenterRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCostCenterRequest' when calling updateOneCostCenter(Async)");
        }

        return updateOneCostCenterCall(id, updateCostCenterRequest, _callback);

    }


    private ApiResponse<CostCenterResponseMapped> updateOneCostCenterWithHttpInfo(String id, UpdateCostCenterRequest updateCostCenterRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOneCostCenterValidateBeforeCall(id, updateCostCenterRequest, null);
        Type localVarReturnType = new TypeToken<CostCenterResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOneCostCenterAsync(String id, UpdateCostCenterRequest updateCostCenterRequest, final ApiCallback<CostCenterResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOneCostCenterValidateBeforeCall(id, updateCostCenterRequest, _callback);
        Type localVarReturnType = new TypeToken<CostCenterResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOneCostCenterRequestBuilder {
        private final String id;
        private String code;
        private String name;

        private UpdateOneCostCenterRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set code
         * @param code  (optional)
         * @return UpdateOneCostCenterRequestBuilder
         */
        public UpdateOneCostCenterRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateOneCostCenterRequestBuilder
         */
        public UpdateOneCostCenterRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateOneCostCenter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCostCenterRequest updateCostCenterRequest = buildBodyParams();
            return updateOneCostCenterCall(id, updateCostCenterRequest, _callback);
        }

        private UpdateCostCenterRequest buildBodyParams() {
            UpdateCostCenterRequest updateCostCenterRequest = new UpdateCostCenterRequest();
            updateCostCenterRequest.code(this.code);
            updateCostCenterRequest.name(this.name);
            return updateCostCenterRequest;
        }

        /**
         * Execute updateOneCostCenter request
         * @return CostCenterResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostCenterResponseMapped execute() throws ApiException {
            UpdateCostCenterRequest updateCostCenterRequest = buildBodyParams();
            ApiResponse<CostCenterResponseMapped> localVarResp = updateOneCostCenterWithHttpInfo(id, updateCostCenterRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOneCostCenter request with HTTP info returned
         * @return ApiResponse&lt;CostCenterResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostCenterResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateCostCenterRequest updateCostCenterRequest = buildBodyParams();
            return updateOneCostCenterWithHttpInfo(id, updateCostCenterRequest);
        }

        /**
         * Execute updateOneCostCenter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostCenterResponseMapped> _callback) throws ApiException {
            UpdateCostCenterRequest updateCostCenterRequest = buildBodyParams();
            return updateOneCostCenterAsync(id, updateCostCenterRequest, _callback);
        }
    }

    /**
     * Update One Cost Center
     * Update One Cost Center
     * @param id Resource Id (required)
     * @param updateCostCenterRequest  (required)
     * @return UpdateOneCostCenterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOneCostCenterRequestBuilder updateOneCostCenter(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateOneCostCenterRequestBuilder(id);
    }
}
