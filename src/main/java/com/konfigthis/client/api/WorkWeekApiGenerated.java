/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateWorkWeekRequest;
import com.konfigthis.client.model.EmptyResponseMapped;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UpdateWorkWeekRequest;
import com.konfigthis.client.model.WorkWeekDayRequest;
import com.konfigthis.client.model.WorkWeekGetOneResponseMapped;
import com.konfigthis.client.model.WorkWeekResponseMapped;
import com.konfigthis.client.model.WorkWeeksGetManyResponseMapped;
import com.konfigthis.client.model.WorkweekGetManyFiltersParameter;
import com.konfigthis.client.model.WorkweekGetManySortParameter;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkWeekApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkWeekApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkWeekApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOneWorkweekCall(CreateWorkWeekRequest createWorkWeekRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWorkWeekRequest;

        // create path and map variables
        String localVarPath = "/work-week";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneWorkweekValidateBeforeCall(CreateWorkWeekRequest createWorkWeekRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createWorkWeekRequest' is set
        if (createWorkWeekRequest == null) {
            throw new ApiException("Missing the required parameter 'createWorkWeekRequest' when calling createOneWorkweek(Async)");
        }

        return createOneWorkweekCall(createWorkWeekRequest, _callback);

    }


    private ApiResponse<WorkWeekResponseMapped> createOneWorkweekWithHttpInfo(CreateWorkWeekRequest createWorkWeekRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneWorkweekValidateBeforeCall(createWorkWeekRequest, null);
        Type localVarReturnType = new TypeToken<WorkWeekResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneWorkweekAsync(CreateWorkWeekRequest createWorkWeekRequest, final ApiCallback<WorkWeekResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneWorkweekValidateBeforeCall(createWorkWeekRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkWeekResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneWorkweekRequestBuilder {
        private final OffsetDateTime effectiveFrom;
        private final String timezone;
        private final Double duration;
        private final WorkWeekDayRequest monday;
        private final WorkWeekDayRequest tuesday;
        private final WorkWeekDayRequest wednesday;
        private final WorkWeekDayRequest thursday;
        private final WorkWeekDayRequest friday;
        private final WorkWeekDayRequest saturday;
        private final WorkWeekDayRequest sunday;
        private String employeeId;
        private String officeId;
        private OffsetDateTime effectiveTo;

        private CreateOneWorkweekRequestBuilder(OffsetDateTime effectiveFrom, String timezone, double duration, WorkWeekDayRequest monday, WorkWeekDayRequest tuesday, WorkWeekDayRequest wednesday, WorkWeekDayRequest thursday, WorkWeekDayRequest friday, WorkWeekDayRequest saturday, WorkWeekDayRequest sunday) {
            this.effectiveFrom = effectiveFrom;
            this.timezone = timezone;
            this.duration = duration;
            this.monday = monday;
            this.tuesday = tuesday;
            this.wednesday = wednesday;
            this.thursday = thursday;
            this.friday = friday;
            this.saturday = saturday;
            this.sunday = sunday;
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return CreateOneWorkweekRequestBuilder
         */
        public CreateOneWorkweekRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set officeId
         * @param officeId  (optional)
         * @return CreateOneWorkweekRequestBuilder
         */
        public CreateOneWorkweekRequestBuilder officeId(String officeId) {
            this.officeId = officeId;
            return this;
        }
        
        /**
         * Set effectiveTo
         * @param effectiveTo  (optional)
         * @return CreateOneWorkweekRequestBuilder
         */
        public CreateOneWorkweekRequestBuilder effectiveTo(OffsetDateTime effectiveTo) {
            this.effectiveTo = effectiveTo;
            return this;
        }
        
        /**
         * Build call for createOneWorkweek
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateWorkWeekRequest createWorkWeekRequest = buildBodyParams();
            return createOneWorkweekCall(createWorkWeekRequest, _callback);
        }

        private CreateWorkWeekRequest buildBodyParams() {
            CreateWorkWeekRequest createWorkWeekRequest = new CreateWorkWeekRequest();
            createWorkWeekRequest.employeeId(this.employeeId);
            createWorkWeekRequest.officeId(this.officeId);
            createWorkWeekRequest.effectiveFrom(this.effectiveFrom);
            createWorkWeekRequest.effectiveTo(this.effectiveTo);
            createWorkWeekRequest.timezone(this.timezone);
            createWorkWeekRequest.duration(this.duration);
            createWorkWeekRequest.monday(this.monday);
            createWorkWeekRequest.tuesday(this.tuesday);
            createWorkWeekRequest.wednesday(this.wednesday);
            createWorkWeekRequest.thursday(this.thursday);
            createWorkWeekRequest.friday(this.friday);
            createWorkWeekRequest.saturday(this.saturday);
            createWorkWeekRequest.sunday(this.sunday);
            return createWorkWeekRequest;
        }

        /**
         * Execute createOneWorkweek request
         * @return WorkWeekResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public WorkWeekResponseMapped execute() throws ApiException {
            CreateWorkWeekRequest createWorkWeekRequest = buildBodyParams();
            ApiResponse<WorkWeekResponseMapped> localVarResp = createOneWorkweekWithHttpInfo(createWorkWeekRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOneWorkweek request with HTTP info returned
         * @return ApiResponse&lt;WorkWeekResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkWeekResponseMapped> executeWithHttpInfo() throws ApiException {
            CreateWorkWeekRequest createWorkWeekRequest = buildBodyParams();
            return createOneWorkweekWithHttpInfo(createWorkWeekRequest);
        }

        /**
         * Execute createOneWorkweek request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkWeekResponseMapped> _callback) throws ApiException {
            CreateWorkWeekRequest createWorkWeekRequest = buildBodyParams();
            return createOneWorkweekAsync(createWorkWeekRequest, _callback);
        }
    }

    /**
     * Create One WorkWeek
     * Create One WorkWeek
     * @param createWorkWeekRequest  (required)
     * @return CreateOneWorkweekRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneWorkweekRequestBuilder createOneWorkweek(OffsetDateTime effectiveFrom, String timezone, double duration, WorkWeekDayRequest monday, WorkWeekDayRequest tuesday, WorkWeekDayRequest wednesday, WorkWeekDayRequest thursday, WorkWeekDayRequest friday, WorkWeekDayRequest saturday, WorkWeekDayRequest sunday) throws IllegalArgumentException {
        if (effectiveFrom == null) throw new IllegalArgumentException("\"effectiveFrom\" is required but got null");
        if (timezone == null) throw new IllegalArgumentException("\"timezone\" is required but got null");
            

        
        if (monday == null) throw new IllegalArgumentException("\"monday\" is required but got null");
        if (tuesday == null) throw new IllegalArgumentException("\"tuesday\" is required but got null");
        if (wednesday == null) throw new IllegalArgumentException("\"wednesday\" is required but got null");
        if (thursday == null) throw new IllegalArgumentException("\"thursday\" is required but got null");
        if (friday == null) throw new IllegalArgumentException("\"friday\" is required but got null");
        if (saturday == null) throw new IllegalArgumentException("\"saturday\" is required but got null");
        if (sunday == null) throw new IllegalArgumentException("\"sunday\" is required but got null");
        return new CreateOneWorkweekRequestBuilder(effectiveFrom, timezone, duration, monday, tuesday, wednesday, thursday, friday, saturday, sunday);
    }
    private okhttp3.Call deleteOneCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/work-week/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOneValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOne(Async)");
        }

        return deleteOneCall(id, _callback);

    }


    private ApiResponse<EmptyResponseMapped> deleteOneWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOneValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOneAsync(String id, final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOneValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOneRequestBuilder {
        private final String id;

        private DeleteOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOneCall(id, _callback);
        }


        /**
         * Execute deleteOne request
         * @return EmptyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponseMapped execute() throws ApiException {
            ApiResponse<EmptyResponseMapped> localVarResp = deleteOneWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOne request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponseMapped> executeWithHttpInfo() throws ApiException {
            return deleteOneWithHttpInfo(id);
        }

        /**
         * Execute deleteOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {
            return deleteOneAsync(id, _callback);
        }
    }

    /**
     * Delete One WorkWeek
     * Delete One WorkWeek
     * @param id Resource Id (required)
     * @return DeleteOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOneRequestBuilder deleteOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteOneRequestBuilder(id);
    }
    private okhttp3.Call getManyCall(List<String> select, List<String> relations, WorkweekGetManyFiltersParameter filters, Integer limit, Integer offset, WorkweekGetManySortParameter sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/work-week";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManyValidateBeforeCall(List<String> select, List<String> relations, WorkweekGetManyFiltersParameter filters, Integer limit, Integer offset, WorkweekGetManySortParameter sort, final ApiCallback _callback) throws ApiException {
        return getManyCall(select, relations, filters, limit, offset, sort, _callback);

    }


    private ApiResponse<WorkWeeksGetManyResponseMapped> getManyWithHttpInfo(List<String> select, List<String> relations, WorkweekGetManyFiltersParameter filters, Integer limit, Integer offset, WorkweekGetManySortParameter sort) throws ApiException {
        okhttp3.Call localVarCall = getManyValidateBeforeCall(select, relations, filters, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<WorkWeeksGetManyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getManyAsync(List<String> select, List<String> relations, WorkweekGetManyFiltersParameter filters, Integer limit, Integer offset, WorkweekGetManySortParameter sort, final ApiCallback<WorkWeeksGetManyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManyValidateBeforeCall(select, relations, filters, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<WorkWeeksGetManyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetManyRequestBuilder {
        private List<String> select;
        private List<String> relations;
        private WorkweekGetManyFiltersParameter filters;
        private Integer limit;
        private Integer offset;
        private WorkweekGetManySortParameter sort;

        private GetManyRequestBuilder() {
        }

        /**
         * Set select
         * @param select Select WorkWeek fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related WorkWeek resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Set filters
         * @param filters Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder filters(WorkweekGetManyFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit amount of received WorkWeeks. (e.g. &#x60;limit&#x3D;20&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset amount of received WorkWeeks. (e.g. &#x60;offset&#x3D;20&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort received WorkWeeks by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder sort(WorkweekGetManySortParameter sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getMany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getManyCall(select, relations, filters, limit, offset, sort, _callback);
        }


        /**
         * Execute getMany request
         * @return WorkWeeksGetManyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public WorkWeeksGetManyResponseMapped execute() throws ApiException {
            ApiResponse<WorkWeeksGetManyResponseMapped> localVarResp = getManyWithHttpInfo(select, relations, filters, limit, offset, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMany request with HTTP info returned
         * @return ApiResponse&lt;WorkWeeksGetManyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkWeeksGetManyResponseMapped> executeWithHttpInfo() throws ApiException {
            return getManyWithHttpInfo(select, relations, filters, limit, offset, sort);
        }

        /**
         * Execute getMany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkWeeksGetManyResponseMapped> _callback) throws ApiException {
            return getManyAsync(select, relations, filters, limit, offset, sort, _callback);
        }
    }

    /**
     * Get Many WorkWeeks
     * Get Many WorkWeeks
     * @return GetManyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetManyRequestBuilder getMany() throws IllegalArgumentException {
        return new GetManyRequestBuilder();
    }
    private okhttp3.Call getOneCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/work-week/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneValidateBeforeCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOne(Async)");
        }

        return getOneCall(id, select, relations, _callback);

    }


    private ApiResponse<WorkWeekGetOneResponseMapped> getOneWithHttpInfo(String id, List<String> select, List<String> relations) throws ApiException {
        okhttp3.Call localVarCall = getOneValidateBeforeCall(id, select, relations, null);
        Type localVarReturnType = new TypeToken<WorkWeekGetOneResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneAsync(String id, List<String> select, List<String> relations, final ApiCallback<WorkWeekGetOneResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneValidateBeforeCall(id, select, relations, _callback);
        Type localVarReturnType = new TypeToken<WorkWeekGetOneResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneRequestBuilder {
        private final String id;
        private List<String> select;
        private List<String> relations;

        private GetOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set select
         * @param select Select WorkWeek fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetOneRequestBuilder
         */
        public GetOneRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related WorkWeek resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return GetOneRequestBuilder
         */
        public GetOneRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Build call for getOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneCall(id, select, relations, _callback);
        }


        /**
         * Execute getOne request
         * @return WorkWeekGetOneResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public WorkWeekGetOneResponseMapped execute() throws ApiException {
            ApiResponse<WorkWeekGetOneResponseMapped> localVarResp = getOneWithHttpInfo(id, select, relations);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOne request with HTTP info returned
         * @return ApiResponse&lt;WorkWeekGetOneResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkWeekGetOneResponseMapped> executeWithHttpInfo() throws ApiException {
            return getOneWithHttpInfo(id, select, relations);
        }

        /**
         * Execute getOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkWeekGetOneResponseMapped> _callback) throws ApiException {
            return getOneAsync(id, select, relations, _callback);
        }
    }

    /**
     * Get One WorkWeek
     * Get One WorkWeek
     * @param id Resource Id (required)
     * @return GetOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetOneRequestBuilder getOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOneRequestBuilder(id);
    }
    private okhttp3.Call replaceOneCall(String id, UpdateWorkWeekRequest updateWorkWeekRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWorkWeekRequest;

        // create path and map variables
        String localVarPath = "/work-week/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceOneValidateBeforeCall(String id, UpdateWorkWeekRequest updateWorkWeekRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceOne(Async)");
        }

        // verify the required parameter 'updateWorkWeekRequest' is set
        if (updateWorkWeekRequest == null) {
            throw new ApiException("Missing the required parameter 'updateWorkWeekRequest' when calling replaceOne(Async)");
        }

        return replaceOneCall(id, updateWorkWeekRequest, _callback);

    }


    private ApiResponse<WorkWeekResponseMapped> replaceOneWithHttpInfo(String id, UpdateWorkWeekRequest updateWorkWeekRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateWorkWeekRequest, null);
        Type localVarReturnType = new TypeToken<WorkWeekResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceOneAsync(String id, UpdateWorkWeekRequest updateWorkWeekRequest, final ApiCallback<WorkWeekResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateWorkWeekRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkWeekResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceOneRequestBuilder {
        private final String id;
        private OffsetDateTime effectiveTo;

        private ReplaceOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set effectiveTo
         * @param effectiveTo  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder effectiveTo(OffsetDateTime effectiveTo) {
            this.effectiveTo = effectiveTo;
            return this;
        }
        
        /**
         * Build call for replaceOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateWorkWeekRequest updateWorkWeekRequest = buildBodyParams();
            return replaceOneCall(id, updateWorkWeekRequest, _callback);
        }

        private UpdateWorkWeekRequest buildBodyParams() {
            UpdateWorkWeekRequest updateWorkWeekRequest = new UpdateWorkWeekRequest();
            updateWorkWeekRequest.effectiveTo(this.effectiveTo);
            return updateWorkWeekRequest;
        }

        /**
         * Execute replaceOne request
         * @return WorkWeekResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public WorkWeekResponseMapped execute() throws ApiException {
            UpdateWorkWeekRequest updateWorkWeekRequest = buildBodyParams();
            ApiResponse<WorkWeekResponseMapped> localVarResp = replaceOneWithHttpInfo(id, updateWorkWeekRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceOne request with HTTP info returned
         * @return ApiResponse&lt;WorkWeekResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkWeekResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateWorkWeekRequest updateWorkWeekRequest = buildBodyParams();
            return replaceOneWithHttpInfo(id, updateWorkWeekRequest);
        }

        /**
         * Execute replaceOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkWeekResponseMapped> _callback) throws ApiException {
            UpdateWorkWeekRequest updateWorkWeekRequest = buildBodyParams();
            return replaceOneAsync(id, updateWorkWeekRequest, _callback);
        }
    }

    /**
     * Replace One WorkWeek
     * Replace One WorkWeek
     * @param id Resource Id (required)
     * @param updateWorkWeekRequest  (required)
     * @return ReplaceOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceOneRequestBuilder replaceOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReplaceOneRequestBuilder(id);
    }
    private okhttp3.Call updateOneCall(String id, UpdateWorkWeekRequest updateWorkWeekRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWorkWeekRequest;

        // create path and map variables
        String localVarPath = "/work-week/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOneValidateBeforeCall(String id, UpdateWorkWeekRequest updateWorkWeekRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOne(Async)");
        }

        // verify the required parameter 'updateWorkWeekRequest' is set
        if (updateWorkWeekRequest == null) {
            throw new ApiException("Missing the required parameter 'updateWorkWeekRequest' when calling updateOne(Async)");
        }

        return updateOneCall(id, updateWorkWeekRequest, _callback);

    }


    private ApiResponse<WorkWeekResponseMapped> updateOneWithHttpInfo(String id, UpdateWorkWeekRequest updateWorkWeekRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOneValidateBeforeCall(id, updateWorkWeekRequest, null);
        Type localVarReturnType = new TypeToken<WorkWeekResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOneAsync(String id, UpdateWorkWeekRequest updateWorkWeekRequest, final ApiCallback<WorkWeekResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOneValidateBeforeCall(id, updateWorkWeekRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkWeekResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOneRequestBuilder {
        private final String id;
        private OffsetDateTime effectiveTo;

        private UpdateOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set effectiveTo
         * @param effectiveTo  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder effectiveTo(OffsetDateTime effectiveTo) {
            this.effectiveTo = effectiveTo;
            return this;
        }
        
        /**
         * Build call for updateOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateWorkWeekRequest updateWorkWeekRequest = buildBodyParams();
            return updateOneCall(id, updateWorkWeekRequest, _callback);
        }

        private UpdateWorkWeekRequest buildBodyParams() {
            UpdateWorkWeekRequest updateWorkWeekRequest = new UpdateWorkWeekRequest();
            updateWorkWeekRequest.effectiveTo(this.effectiveTo);
            return updateWorkWeekRequest;
        }

        /**
         * Execute updateOne request
         * @return WorkWeekResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public WorkWeekResponseMapped execute() throws ApiException {
            UpdateWorkWeekRequest updateWorkWeekRequest = buildBodyParams();
            ApiResponse<WorkWeekResponseMapped> localVarResp = updateOneWithHttpInfo(id, updateWorkWeekRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOne request with HTTP info returned
         * @return ApiResponse&lt;WorkWeekResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkWeekResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateWorkWeekRequest updateWorkWeekRequest = buildBodyParams();
            return updateOneWithHttpInfo(id, updateWorkWeekRequest);
        }

        /**
         * Execute updateOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkWeekResponseMapped> _callback) throws ApiException {
            UpdateWorkWeekRequest updateWorkWeekRequest = buildBodyParams();
            return updateOneAsync(id, updateWorkWeekRequest, _callback);
        }
    }

    /**
     * Update One WorkWeek
     * Update One WorkWeek
     * @param id Resource Id (required)
     * @param updateWorkWeekRequest  (required)
     * @return UpdateOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOneRequestBuilder updateOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateOneRequestBuilder(id);
    }
}
