/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateTeamRequest;
import com.konfigthis.client.model.EmptyResponseMapped;
import com.konfigthis.client.model.TeamGetOneResponseMapped;
import com.konfigthis.client.model.TeamListTeamsFiltersParameter;
import com.konfigthis.client.model.TeamListTeamsSortParameter;
import com.konfigthis.client.model.TeamResponseMapped;
import com.konfigthis.client.model.TeamsGetManyResponseMapped;
import com.konfigthis.client.model.UpdateTeamRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeamApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TeamApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOneTeamCall(CreateTeamRequest createTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTeamRequest;

        // create path and map variables
        String localVarPath = "/team";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneTeamValidateBeforeCall(CreateTeamRequest createTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTeamRequest' is set
        if (createTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'createTeamRequest' when calling createOneTeam(Async)");
        }

        return createOneTeamCall(createTeamRequest, _callback);

    }


    private ApiResponse<TeamResponseMapped> createOneTeamWithHttpInfo(CreateTeamRequest createTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneTeamValidateBeforeCall(createTeamRequest, null);
        Type localVarReturnType = new TypeToken<TeamResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneTeamAsync(CreateTeamRequest createTeamRequest, final ApiCallback<TeamResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneTeamValidateBeforeCall(createTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneTeamRequestBuilder {
        private final String name;
        private final String bgColor;
        private final String fgColor;
        private String description;

        private CreateOneTeamRequestBuilder(String name, String bgColor, String fgColor) {
            this.name = name;
            this.bgColor = bgColor;
            this.fgColor = fgColor;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateOneTeamRequestBuilder
         */
        public CreateOneTeamRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createOneTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTeamRequest createTeamRequest = buildBodyParams();
            return createOneTeamCall(createTeamRequest, _callback);
        }

        private CreateTeamRequest buildBodyParams() {
            CreateTeamRequest createTeamRequest = new CreateTeamRequest();
            createTeamRequest.description(this.description);
            createTeamRequest.name(this.name);
            createTeamRequest.bgColor(this.bgColor);
            createTeamRequest.fgColor(this.fgColor);
            return createTeamRequest;
        }

        /**
         * Execute createOneTeam request
         * @return TeamResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public TeamResponseMapped execute() throws ApiException {
            CreateTeamRequest createTeamRequest = buildBodyParams();
            ApiResponse<TeamResponseMapped> localVarResp = createOneTeamWithHttpInfo(createTeamRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOneTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamResponseMapped> executeWithHttpInfo() throws ApiException {
            CreateTeamRequest createTeamRequest = buildBodyParams();
            return createOneTeamWithHttpInfo(createTeamRequest);
        }

        /**
         * Execute createOneTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamResponseMapped> _callback) throws ApiException {
            CreateTeamRequest createTeamRequest = buildBodyParams();
            return createOneTeamAsync(createTeamRequest, _callback);
        }
    }

    /**
     * Create One Team
     * Create One Team
     * @param createTeamRequest  (required)
     * @return CreateOneTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneTeamRequestBuilder createOneTeam(String name, String bgColor, String fgColor) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (bgColor == null) throw new IllegalArgumentException("\"bgColor\" is required but got null");
            

        if (fgColor == null) throw new IllegalArgumentException("\"fgColor\" is required but got null");
            

        return new CreateOneTeamRequestBuilder(name, bgColor, fgColor);
    }
    private okhttp3.Call deleteOneCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOneValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOne(Async)");
        }

        return deleteOneCall(id, _callback);

    }


    private ApiResponse<EmptyResponseMapped> deleteOneWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOneValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOneAsync(String id, final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOneValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOneRequestBuilder {
        private final String id;

        private DeleteOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOneCall(id, _callback);
        }


        /**
         * Execute deleteOne request
         * @return EmptyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponseMapped execute() throws ApiException {
            ApiResponse<EmptyResponseMapped> localVarResp = deleteOneWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOne request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponseMapped> executeWithHttpInfo() throws ApiException {
            return deleteOneWithHttpInfo(id);
        }

        /**
         * Execute deleteOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {
            return deleteOneAsync(id, _callback);
        }
    }

    /**
     * Delete One Team
     * Delete One Team
     * @param id Resource Id (required)
     * @return DeleteOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOneRequestBuilder deleteOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteOneRequestBuilder(id);
    }
    private okhttp3.Call getOneTeamCall(String id, List<String> select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneTeamValidateBeforeCall(String id, List<String> select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOneTeam(Async)");
        }

        return getOneTeamCall(id, select, _callback);

    }


    private ApiResponse<TeamGetOneResponseMapped> getOneTeamWithHttpInfo(String id, List<String> select) throws ApiException {
        okhttp3.Call localVarCall = getOneTeamValidateBeforeCall(id, select, null);
        Type localVarReturnType = new TypeToken<TeamGetOneResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneTeamAsync(String id, List<String> select, final ApiCallback<TeamGetOneResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneTeamValidateBeforeCall(id, select, _callback);
        Type localVarReturnType = new TypeToken<TeamGetOneResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneTeamRequestBuilder {
        private final String id;
        private List<String> select;

        private GetOneTeamRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set select
         * @param select Select Team fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetOneTeamRequestBuilder
         */
        public GetOneTeamRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Build call for getOneTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneTeamCall(id, select, _callback);
        }


        /**
         * Execute getOneTeam request
         * @return TeamGetOneResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public TeamGetOneResponseMapped execute() throws ApiException {
            ApiResponse<TeamGetOneResponseMapped> localVarResp = getOneTeamWithHttpInfo(id, select);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOneTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamGetOneResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamGetOneResponseMapped> executeWithHttpInfo() throws ApiException {
            return getOneTeamWithHttpInfo(id, select);
        }

        /**
         * Execute getOneTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamGetOneResponseMapped> _callback) throws ApiException {
            return getOneTeamAsync(id, select, _callback);
        }
    }

    /**
     * Get One Team
     * Get One Team
     * @param id Resource Id (required)
     * @return GetOneTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetOneTeamRequestBuilder getOneTeam(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOneTeamRequestBuilder(id);
    }
    private okhttp3.Call listTeamsCall(List<String> select, TeamListTeamsFiltersParameter filters, Integer limit, Integer offset, TeamListTeamsSortParameter sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamsValidateBeforeCall(List<String> select, TeamListTeamsFiltersParameter filters, Integer limit, Integer offset, TeamListTeamsSortParameter sort, final ApiCallback _callback) throws ApiException {
        return listTeamsCall(select, filters, limit, offset, sort, _callback);

    }


    private ApiResponse<TeamsGetManyResponseMapped> listTeamsWithHttpInfo(List<String> select, TeamListTeamsFiltersParameter filters, Integer limit, Integer offset, TeamListTeamsSortParameter sort) throws ApiException {
        okhttp3.Call localVarCall = listTeamsValidateBeforeCall(select, filters, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<TeamsGetManyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamsAsync(List<String> select, TeamListTeamsFiltersParameter filters, Integer limit, Integer offset, TeamListTeamsSortParameter sort, final ApiCallback<TeamsGetManyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamsValidateBeforeCall(select, filters, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<TeamsGetManyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamsRequestBuilder {
        private List<String> select;
        private TeamListTeamsFiltersParameter filters;
        private Integer limit;
        private Integer offset;
        private TeamListTeamsSortParameter sort;

        private ListTeamsRequestBuilder() {
        }

        /**
         * Set select
         * @param select Select Team fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return ListTeamsRequestBuilder
         */
        public ListTeamsRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set filters
         * @param filters Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;) (optional)
         * @return ListTeamsRequestBuilder
         */
        public ListTeamsRequestBuilder filters(TeamListTeamsFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit amount of received Teams. (e.g. &#x60;limit&#x3D;20&#x60;) (optional)
         * @return ListTeamsRequestBuilder
         */
        public ListTeamsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset amount of received Teams. (e.g. &#x60;offset&#x3D;20&#x60;) (optional)
         * @return ListTeamsRequestBuilder
         */
        public ListTeamsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort received Teams by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;) (optional)
         * @return ListTeamsRequestBuilder
         */
        public ListTeamsRequestBuilder sort(TeamListTeamsSortParameter sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listTeams
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamsCall(select, filters, limit, offset, sort, _callback);
        }


        /**
         * Execute listTeams request
         * @return TeamsGetManyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public TeamsGetManyResponseMapped execute() throws ApiException {
            ApiResponse<TeamsGetManyResponseMapped> localVarResp = listTeamsWithHttpInfo(select, filters, limit, offset, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeams request with HTTP info returned
         * @return ApiResponse&lt;TeamsGetManyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsGetManyResponseMapped> executeWithHttpInfo() throws ApiException {
            return listTeamsWithHttpInfo(select, filters, limit, offset, sort);
        }

        /**
         * Execute listTeams request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsGetManyResponseMapped> _callback) throws ApiException {
            return listTeamsAsync(select, filters, limit, offset, sort, _callback);
        }
    }

    /**
     * Get Many Teams
     * Get Many Teams
     * @return ListTeamsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamsRequestBuilder listTeams() throws IllegalArgumentException {
        return new ListTeamsRequestBuilder();
    }
    private okhttp3.Call replaceTeamCall(String id, UpdateTeamRequest updateTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTeamRequest;

        // create path and map variables
        String localVarPath = "/team/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceTeamValidateBeforeCall(String id, UpdateTeamRequest updateTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceTeam(Async)");
        }

        // verify the required parameter 'updateTeamRequest' is set
        if (updateTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTeamRequest' when calling replaceTeam(Async)");
        }

        return replaceTeamCall(id, updateTeamRequest, _callback);

    }


    private ApiResponse<TeamResponseMapped> replaceTeamWithHttpInfo(String id, UpdateTeamRequest updateTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceTeamValidateBeforeCall(id, updateTeamRequest, null);
        Type localVarReturnType = new TypeToken<TeamResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceTeamAsync(String id, UpdateTeamRequest updateTeamRequest, final ApiCallback<TeamResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceTeamValidateBeforeCall(id, updateTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceTeamRequestBuilder {
        private final String id;
        private String description;
        private String name;
        private String bgColor;
        private String fgColor;

        private ReplaceTeamRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return ReplaceTeamRequestBuilder
         */
        public ReplaceTeamRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return ReplaceTeamRequestBuilder
         */
        public ReplaceTeamRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set bgColor
         * @param bgColor  (optional)
         * @return ReplaceTeamRequestBuilder
         */
        public ReplaceTeamRequestBuilder bgColor(String bgColor) {
            this.bgColor = bgColor;
            return this;
        }
        
        /**
         * Set fgColor
         * @param fgColor  (optional)
         * @return ReplaceTeamRequestBuilder
         */
        public ReplaceTeamRequestBuilder fgColor(String fgColor) {
            this.fgColor = fgColor;
            return this;
        }
        
        /**
         * Build call for replaceTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTeamRequest updateTeamRequest = buildBodyParams();
            return replaceTeamCall(id, updateTeamRequest, _callback);
        }

        private UpdateTeamRequest buildBodyParams() {
            UpdateTeamRequest updateTeamRequest = new UpdateTeamRequest();
            updateTeamRequest.description(this.description);
            updateTeamRequest.name(this.name);
            updateTeamRequest.bgColor(this.bgColor);
            updateTeamRequest.fgColor(this.fgColor);
            return updateTeamRequest;
        }

        /**
         * Execute replaceTeam request
         * @return TeamResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public TeamResponseMapped execute() throws ApiException {
            UpdateTeamRequest updateTeamRequest = buildBodyParams();
            ApiResponse<TeamResponseMapped> localVarResp = replaceTeamWithHttpInfo(id, updateTeamRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateTeamRequest updateTeamRequest = buildBodyParams();
            return replaceTeamWithHttpInfo(id, updateTeamRequest);
        }

        /**
         * Execute replaceTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamResponseMapped> _callback) throws ApiException {
            UpdateTeamRequest updateTeamRequest = buildBodyParams();
            return replaceTeamAsync(id, updateTeamRequest, _callback);
        }
    }

    /**
     * Replace One Team
     * Replace One Team
     * @param id Resource Id (required)
     * @param updateTeamRequest  (required)
     * @return ReplaceTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceTeamRequestBuilder replaceTeam(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReplaceTeamRequestBuilder(id);
    }
    private okhttp3.Call updateTeamCall(String id, UpdateTeamRequest updateTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTeamRequest;

        // create path and map variables
        String localVarPath = "/team/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamValidateBeforeCall(String id, UpdateTeamRequest updateTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTeam(Async)");
        }

        // verify the required parameter 'updateTeamRequest' is set
        if (updateTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTeamRequest' when calling updateTeam(Async)");
        }

        return updateTeamCall(id, updateTeamRequest, _callback);

    }


    private ApiResponse<TeamResponseMapped> updateTeamWithHttpInfo(String id, UpdateTeamRequest updateTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTeamValidateBeforeCall(id, updateTeamRequest, null);
        Type localVarReturnType = new TypeToken<TeamResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTeamAsync(String id, UpdateTeamRequest updateTeamRequest, final ApiCallback<TeamResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamValidateBeforeCall(id, updateTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTeamRequestBuilder {
        private final String id;
        private String description;
        private String name;
        private String bgColor;
        private String fgColor;

        private UpdateTeamRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set bgColor
         * @param bgColor  (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder bgColor(String bgColor) {
            this.bgColor = bgColor;
            return this;
        }
        
        /**
         * Set fgColor
         * @param fgColor  (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder fgColor(String fgColor) {
            this.fgColor = fgColor;
            return this;
        }
        
        /**
         * Build call for updateTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTeamRequest updateTeamRequest = buildBodyParams();
            return updateTeamCall(id, updateTeamRequest, _callback);
        }

        private UpdateTeamRequest buildBodyParams() {
            UpdateTeamRequest updateTeamRequest = new UpdateTeamRequest();
            updateTeamRequest.description(this.description);
            updateTeamRequest.name(this.name);
            updateTeamRequest.bgColor(this.bgColor);
            updateTeamRequest.fgColor(this.fgColor);
            return updateTeamRequest;
        }

        /**
         * Execute updateTeam request
         * @return TeamResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public TeamResponseMapped execute() throws ApiException {
            UpdateTeamRequest updateTeamRequest = buildBodyParams();
            ApiResponse<TeamResponseMapped> localVarResp = updateTeamWithHttpInfo(id, updateTeamRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateTeamRequest updateTeamRequest = buildBodyParams();
            return updateTeamWithHttpInfo(id, updateTeamRequest);
        }

        /**
         * Execute updateTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamResponseMapped> _callback) throws ApiException {
            UpdateTeamRequest updateTeamRequest = buildBodyParams();
            return updateTeamAsync(id, updateTeamRequest, _callback);
        }
    }

    /**
     * Update One Team
     * Update One Team
     * @param id Resource Id (required)
     * @param updateTeamRequest  (required)
     * @return UpdateTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTeamRequestBuilder updateTeam(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateTeamRequestBuilder(id);
    }
}
