/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOfficeRequest;
import com.konfigthis.client.model.EmptyResponseMapped;
import com.konfigthis.client.model.OfficeGetOneResponseMapped;
import com.konfigthis.client.model.OfficeListManyOfficesFiltersParameter;
import com.konfigthis.client.model.OfficeListManyOfficesSortParameter;
import com.konfigthis.client.model.OfficeResponseMapped;
import com.konfigthis.client.model.OfficesGetManyResponseMapped;
import com.konfigthis.client.model.UpdateOfficeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OfficeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OfficeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OfficeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOneOfficeCall(CreateOfficeRequest createOfficeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOfficeRequest;

        // create path and map variables
        String localVarPath = "/office";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneOfficeValidateBeforeCall(CreateOfficeRequest createOfficeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOfficeRequest' is set
        if (createOfficeRequest == null) {
            throw new ApiException("Missing the required parameter 'createOfficeRequest' when calling createOneOffice(Async)");
        }

        return createOneOfficeCall(createOfficeRequest, _callback);

    }


    private ApiResponse<OfficeResponseMapped> createOneOfficeWithHttpInfo(CreateOfficeRequest createOfficeRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneOfficeValidateBeforeCall(createOfficeRequest, null);
        Type localVarReturnType = new TypeToken<OfficeResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneOfficeAsync(CreateOfficeRequest createOfficeRequest, final ApiCallback<OfficeResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneOfficeValidateBeforeCall(createOfficeRequest, _callback);
        Type localVarReturnType = new TypeToken<OfficeResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneOfficeRequestBuilder {
        private final String name;
        private final String phone;
        private final String email;
        private final String timezone;
        private final String CFAR;
        private final String SCB;
        private final String SNI;

        private CreateOneOfficeRequestBuilder(String name, String phone, String email, String timezone, String CFAR, String SCB, String SNI) {
            this.name = name;
            this.phone = phone;
            this.email = email;
            this.timezone = timezone;
            this.CFAR = CFAR;
            this.SCB = SCB;
            this.SNI = SNI;
        }

        /**
         * Build call for createOneOffice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateOfficeRequest createOfficeRequest = buildBodyParams();
            return createOneOfficeCall(createOfficeRequest, _callback);
        }

        private CreateOfficeRequest buildBodyParams() {
            CreateOfficeRequest createOfficeRequest = new CreateOfficeRequest();
            createOfficeRequest.name(this.name);
            createOfficeRequest.phone(this.phone);
            createOfficeRequest.email(this.email);
            createOfficeRequest.timezone(this.timezone);
            createOfficeRequest.CFAR(this.CFAR);
            createOfficeRequest.SCB(this.SCB);
            createOfficeRequest.SNI(this.SNI);
            return createOfficeRequest;
        }

        /**
         * Execute createOneOffice request
         * @return OfficeResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public OfficeResponseMapped execute() throws ApiException {
            CreateOfficeRequest createOfficeRequest = buildBodyParams();
            ApiResponse<OfficeResponseMapped> localVarResp = createOneOfficeWithHttpInfo(createOfficeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOneOffice request with HTTP info returned
         * @return ApiResponse&lt;OfficeResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficeResponseMapped> executeWithHttpInfo() throws ApiException {
            CreateOfficeRequest createOfficeRequest = buildBodyParams();
            return createOneOfficeWithHttpInfo(createOfficeRequest);
        }

        /**
         * Execute createOneOffice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficeResponseMapped> _callback) throws ApiException {
            CreateOfficeRequest createOfficeRequest = buildBodyParams();
            return createOneOfficeAsync(createOfficeRequest, _callback);
        }
    }

    /**
     * Create One Office
     * Create One Office
     * @param createOfficeRequest  (required)
     * @return CreateOneOfficeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneOfficeRequestBuilder createOneOffice(String name, String phone, String email, String timezone, String CFAR, String SCB, String SNI) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (phone == null) throw new IllegalArgumentException("\"phone\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (timezone == null) throw new IllegalArgumentException("\"timezone\" is required but got null");
            

        if (CFAR == null) throw new IllegalArgumentException("\"CFAR\" is required but got null");
            

        if (SCB == null) throw new IllegalArgumentException("\"SCB\" is required but got null");
            

        if (SNI == null) throw new IllegalArgumentException("\"SNI\" is required but got null");
            

        return new CreateOneOfficeRequestBuilder(name, phone, email, timezone, CFAR, SCB, SNI);
    }
    private okhttp3.Call deleteOneCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/office/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOneValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOne(Async)");
        }

        return deleteOneCall(id, _callback);

    }


    private ApiResponse<EmptyResponseMapped> deleteOneWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOneValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOneAsync(String id, final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOneValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOneRequestBuilder {
        private final String id;

        private DeleteOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOneCall(id, _callback);
        }


        /**
         * Execute deleteOne request
         * @return EmptyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponseMapped execute() throws ApiException {
            ApiResponse<EmptyResponseMapped> localVarResp = deleteOneWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOne request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponseMapped> executeWithHttpInfo() throws ApiException {
            return deleteOneWithHttpInfo(id);
        }

        /**
         * Execute deleteOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {
            return deleteOneAsync(id, _callback);
        }
    }

    /**
     * Delete One Office
     * Delete One Office
     * @param id Resource Id (required)
     * @return DeleteOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOneRequestBuilder deleteOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteOneRequestBuilder(id);
    }
    private okhttp3.Call getOneOfficeCall(String id, List<String> select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/office/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneOfficeValidateBeforeCall(String id, List<String> select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOneOffice(Async)");
        }

        return getOneOfficeCall(id, select, _callback);

    }


    private ApiResponse<OfficeGetOneResponseMapped> getOneOfficeWithHttpInfo(String id, List<String> select) throws ApiException {
        okhttp3.Call localVarCall = getOneOfficeValidateBeforeCall(id, select, null);
        Type localVarReturnType = new TypeToken<OfficeGetOneResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneOfficeAsync(String id, List<String> select, final ApiCallback<OfficeGetOneResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneOfficeValidateBeforeCall(id, select, _callback);
        Type localVarReturnType = new TypeToken<OfficeGetOneResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneOfficeRequestBuilder {
        private final String id;
        private List<String> select;

        private GetOneOfficeRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set select
         * @param select Select Office fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetOneOfficeRequestBuilder
         */
        public GetOneOfficeRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Build call for getOneOffice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneOfficeCall(id, select, _callback);
        }


        /**
         * Execute getOneOffice request
         * @return OfficeGetOneResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public OfficeGetOneResponseMapped execute() throws ApiException {
            ApiResponse<OfficeGetOneResponseMapped> localVarResp = getOneOfficeWithHttpInfo(id, select);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOneOffice request with HTTP info returned
         * @return ApiResponse&lt;OfficeGetOneResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficeGetOneResponseMapped> executeWithHttpInfo() throws ApiException {
            return getOneOfficeWithHttpInfo(id, select);
        }

        /**
         * Execute getOneOffice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficeGetOneResponseMapped> _callback) throws ApiException {
            return getOneOfficeAsync(id, select, _callback);
        }
    }

    /**
     * Get One Office
     * Get One Office
     * @param id Resource Id (required)
     * @return GetOneOfficeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetOneOfficeRequestBuilder getOneOffice(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOneOfficeRequestBuilder(id);
    }
    private okhttp3.Call listManyOfficesCall(List<String> select, OfficeListManyOfficesFiltersParameter filters, Integer limit, Integer offset, OfficeListManyOfficesSortParameter sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/office";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listManyOfficesValidateBeforeCall(List<String> select, OfficeListManyOfficesFiltersParameter filters, Integer limit, Integer offset, OfficeListManyOfficesSortParameter sort, final ApiCallback _callback) throws ApiException {
        return listManyOfficesCall(select, filters, limit, offset, sort, _callback);

    }


    private ApiResponse<OfficesGetManyResponseMapped> listManyOfficesWithHttpInfo(List<String> select, OfficeListManyOfficesFiltersParameter filters, Integer limit, Integer offset, OfficeListManyOfficesSortParameter sort) throws ApiException {
        okhttp3.Call localVarCall = listManyOfficesValidateBeforeCall(select, filters, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<OfficesGetManyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listManyOfficesAsync(List<String> select, OfficeListManyOfficesFiltersParameter filters, Integer limit, Integer offset, OfficeListManyOfficesSortParameter sort, final ApiCallback<OfficesGetManyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = listManyOfficesValidateBeforeCall(select, filters, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<OfficesGetManyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListManyOfficesRequestBuilder {
        private List<String> select;
        private OfficeListManyOfficesFiltersParameter filters;
        private Integer limit;
        private Integer offset;
        private OfficeListManyOfficesSortParameter sort;

        private ListManyOfficesRequestBuilder() {
        }

        /**
         * Set select
         * @param select Select Office fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return ListManyOfficesRequestBuilder
         */
        public ListManyOfficesRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set filters
         * @param filters Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;) (optional)
         * @return ListManyOfficesRequestBuilder
         */
        public ListManyOfficesRequestBuilder filters(OfficeListManyOfficesFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit amount of received Offices. (e.g. &#x60;limit&#x3D;20&#x60;) (optional)
         * @return ListManyOfficesRequestBuilder
         */
        public ListManyOfficesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset amount of received Offices. (e.g. &#x60;offset&#x3D;20&#x60;) (optional)
         * @return ListManyOfficesRequestBuilder
         */
        public ListManyOfficesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort received Offices by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;) (optional)
         * @return ListManyOfficesRequestBuilder
         */
        public ListManyOfficesRequestBuilder sort(OfficeListManyOfficesSortParameter sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listManyOffices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listManyOfficesCall(select, filters, limit, offset, sort, _callback);
        }


        /**
         * Execute listManyOffices request
         * @return OfficesGetManyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public OfficesGetManyResponseMapped execute() throws ApiException {
            ApiResponse<OfficesGetManyResponseMapped> localVarResp = listManyOfficesWithHttpInfo(select, filters, limit, offset, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listManyOffices request with HTTP info returned
         * @return ApiResponse&lt;OfficesGetManyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficesGetManyResponseMapped> executeWithHttpInfo() throws ApiException {
            return listManyOfficesWithHttpInfo(select, filters, limit, offset, sort);
        }

        /**
         * Execute listManyOffices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficesGetManyResponseMapped> _callback) throws ApiException {
            return listManyOfficesAsync(select, filters, limit, offset, sort, _callback);
        }
    }

    /**
     * Get Many Offices
     * Get Many Offices
     * @return ListManyOfficesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListManyOfficesRequestBuilder listManyOffices() throws IllegalArgumentException {
        return new ListManyOfficesRequestBuilder();
    }
    private okhttp3.Call replaceOneCall(String id, UpdateOfficeRequest updateOfficeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOfficeRequest;

        // create path and map variables
        String localVarPath = "/office/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceOneValidateBeforeCall(String id, UpdateOfficeRequest updateOfficeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceOne(Async)");
        }

        // verify the required parameter 'updateOfficeRequest' is set
        if (updateOfficeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOfficeRequest' when calling replaceOne(Async)");
        }

        return replaceOneCall(id, updateOfficeRequest, _callback);

    }


    private ApiResponse<OfficeResponseMapped> replaceOneWithHttpInfo(String id, UpdateOfficeRequest updateOfficeRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateOfficeRequest, null);
        Type localVarReturnType = new TypeToken<OfficeResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceOneAsync(String id, UpdateOfficeRequest updateOfficeRequest, final ApiCallback<OfficeResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateOfficeRequest, _callback);
        Type localVarReturnType = new TypeToken<OfficeResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceOneRequestBuilder {
        private final String id;
        private String name;
        private String phone;
        private String email;
        private String timezone;
        private String CFAR;
        private String SCB;
        private String SNI;

        private ReplaceOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set phone
         * @param phone  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set CFAR
         * @param CFAR  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder CFAR(String CFAR) {
            this.CFAR = CFAR;
            return this;
        }
        
        /**
         * Set SCB
         * @param SCB  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder SCB(String SCB) {
            this.SCB = SCB;
            return this;
        }
        
        /**
         * Set SNI
         * @param SNI  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder SNI(String SNI) {
            this.SNI = SNI;
            return this;
        }
        
        /**
         * Build call for replaceOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateOfficeRequest updateOfficeRequest = buildBodyParams();
            return replaceOneCall(id, updateOfficeRequest, _callback);
        }

        private UpdateOfficeRequest buildBodyParams() {
            UpdateOfficeRequest updateOfficeRequest = new UpdateOfficeRequest();
            updateOfficeRequest.name(this.name);
            updateOfficeRequest.phone(this.phone);
            updateOfficeRequest.email(this.email);
            updateOfficeRequest.timezone(this.timezone);
            updateOfficeRequest.CFAR(this.CFAR);
            updateOfficeRequest.SCB(this.SCB);
            updateOfficeRequest.SNI(this.SNI);
            return updateOfficeRequest;
        }

        /**
         * Execute replaceOne request
         * @return OfficeResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public OfficeResponseMapped execute() throws ApiException {
            UpdateOfficeRequest updateOfficeRequest = buildBodyParams();
            ApiResponse<OfficeResponseMapped> localVarResp = replaceOneWithHttpInfo(id, updateOfficeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceOne request with HTTP info returned
         * @return ApiResponse&lt;OfficeResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficeResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateOfficeRequest updateOfficeRequest = buildBodyParams();
            return replaceOneWithHttpInfo(id, updateOfficeRequest);
        }

        /**
         * Execute replaceOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficeResponseMapped> _callback) throws ApiException {
            UpdateOfficeRequest updateOfficeRequest = buildBodyParams();
            return replaceOneAsync(id, updateOfficeRequest, _callback);
        }
    }

    /**
     * Replace One Office
     * Replace One Office
     * @param id Resource Id (required)
     * @param updateOfficeRequest  (required)
     * @return ReplaceOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceOneRequestBuilder replaceOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReplaceOneRequestBuilder(id);
    }
    private okhttp3.Call updateOneCall(String id, UpdateOfficeRequest updateOfficeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOfficeRequest;

        // create path and map variables
        String localVarPath = "/office/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOneValidateBeforeCall(String id, UpdateOfficeRequest updateOfficeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOne(Async)");
        }

        // verify the required parameter 'updateOfficeRequest' is set
        if (updateOfficeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOfficeRequest' when calling updateOne(Async)");
        }

        return updateOneCall(id, updateOfficeRequest, _callback);

    }


    private ApiResponse<OfficeResponseMapped> updateOneWithHttpInfo(String id, UpdateOfficeRequest updateOfficeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOneValidateBeforeCall(id, updateOfficeRequest, null);
        Type localVarReturnType = new TypeToken<OfficeResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOneAsync(String id, UpdateOfficeRequest updateOfficeRequest, final ApiCallback<OfficeResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOneValidateBeforeCall(id, updateOfficeRequest, _callback);
        Type localVarReturnType = new TypeToken<OfficeResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOneRequestBuilder {
        private final String id;
        private String name;
        private String phone;
        private String email;
        private String timezone;
        private String CFAR;
        private String SCB;
        private String SNI;

        private UpdateOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set phone
         * @param phone  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set CFAR
         * @param CFAR  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder CFAR(String CFAR) {
            this.CFAR = CFAR;
            return this;
        }
        
        /**
         * Set SCB
         * @param SCB  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder SCB(String SCB) {
            this.SCB = SCB;
            return this;
        }
        
        /**
         * Set SNI
         * @param SNI  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder SNI(String SNI) {
            this.SNI = SNI;
            return this;
        }
        
        /**
         * Build call for updateOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateOfficeRequest updateOfficeRequest = buildBodyParams();
            return updateOneCall(id, updateOfficeRequest, _callback);
        }

        private UpdateOfficeRequest buildBodyParams() {
            UpdateOfficeRequest updateOfficeRequest = new UpdateOfficeRequest();
            updateOfficeRequest.name(this.name);
            updateOfficeRequest.phone(this.phone);
            updateOfficeRequest.email(this.email);
            updateOfficeRequest.timezone(this.timezone);
            updateOfficeRequest.CFAR(this.CFAR);
            updateOfficeRequest.SCB(this.SCB);
            updateOfficeRequest.SNI(this.SNI);
            return updateOfficeRequest;
        }

        /**
         * Execute updateOne request
         * @return OfficeResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public OfficeResponseMapped execute() throws ApiException {
            UpdateOfficeRequest updateOfficeRequest = buildBodyParams();
            ApiResponse<OfficeResponseMapped> localVarResp = updateOneWithHttpInfo(id, updateOfficeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOne request with HTTP info returned
         * @return ApiResponse&lt;OfficeResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficeResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateOfficeRequest updateOfficeRequest = buildBodyParams();
            return updateOneWithHttpInfo(id, updateOfficeRequest);
        }

        /**
         * Execute updateOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficeResponseMapped> _callback) throws ApiException {
            UpdateOfficeRequest updateOfficeRequest = buildBodyParams();
            return updateOneAsync(id, updateOfficeRequest, _callback);
        }
    }

    /**
     * Update One Office
     * Update One Office
     * @param id Resource Id (required)
     * @param updateOfficeRequest  (required)
     * @return UpdateOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOneRequestBuilder updateOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateOneRequestBuilder(id);
    }
}
