/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateEmployeeTeamReferenceRequest;
import com.konfigthis.client.model.EmployeeTeamReferenceGetOneResponseMapped;
import com.konfigthis.client.model.EmployeeTeamReferenceResponseMapped;
import com.konfigthis.client.model.EmployeeTeamReferencesGetManyResponseMapped;
import com.konfigthis.client.model.EmployeeteamreferenceGetManyFiltersParameter;
import com.konfigthis.client.model.EmployeeteamreferenceGetManySortParameter;
import com.konfigthis.client.model.EmptyResponseMapped;
import com.konfigthis.client.model.UpdateEmployeeTeamReferenceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeTeamReferenceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeTeamReferenceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeTeamReferenceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOneEmployeeTeamReferenceCall(CreateEmployeeTeamReferenceRequest createEmployeeTeamReferenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEmployeeTeamReferenceRequest;

        // create path and map variables
        String localVarPath = "/employee-team-reference";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneEmployeeTeamReferenceValidateBeforeCall(CreateEmployeeTeamReferenceRequest createEmployeeTeamReferenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createEmployeeTeamReferenceRequest' is set
        if (createEmployeeTeamReferenceRequest == null) {
            throw new ApiException("Missing the required parameter 'createEmployeeTeamReferenceRequest' when calling createOneEmployeeTeamReference(Async)");
        }

        return createOneEmployeeTeamReferenceCall(createEmployeeTeamReferenceRequest, _callback);

    }


    private ApiResponse<EmployeeTeamReferenceResponseMapped> createOneEmployeeTeamReferenceWithHttpInfo(CreateEmployeeTeamReferenceRequest createEmployeeTeamReferenceRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneEmployeeTeamReferenceValidateBeforeCall(createEmployeeTeamReferenceRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferenceResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneEmployeeTeamReferenceAsync(CreateEmployeeTeamReferenceRequest createEmployeeTeamReferenceRequest, final ApiCallback<EmployeeTeamReferenceResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneEmployeeTeamReferenceValidateBeforeCall(createEmployeeTeamReferenceRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferenceResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneEmployeeTeamReferenceRequestBuilder {
        private final String teamId;
        private final String companyId;
        private final String employeeId;
        private final String userId;

        private CreateOneEmployeeTeamReferenceRequestBuilder(String teamId, String companyId, String employeeId, String userId) {
            this.teamId = teamId;
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.userId = userId;
        }

        /**
         * Build call for createOneEmployeeTeamReference
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateEmployeeTeamReferenceRequest createEmployeeTeamReferenceRequest = buildBodyParams();
            return createOneEmployeeTeamReferenceCall(createEmployeeTeamReferenceRequest, _callback);
        }

        private CreateEmployeeTeamReferenceRequest buildBodyParams() {
            CreateEmployeeTeamReferenceRequest createEmployeeTeamReferenceRequest = new CreateEmployeeTeamReferenceRequest();
            createEmployeeTeamReferenceRequest.teamId(this.teamId);
            createEmployeeTeamReferenceRequest.companyId(this.companyId);
            createEmployeeTeamReferenceRequest.employeeId(this.employeeId);
            createEmployeeTeamReferenceRequest.userId(this.userId);
            return createEmployeeTeamReferenceRequest;
        }

        /**
         * Execute createOneEmployeeTeamReference request
         * @return EmployeeTeamReferenceResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTeamReferenceResponseMapped execute() throws ApiException {
            CreateEmployeeTeamReferenceRequest createEmployeeTeamReferenceRequest = buildBodyParams();
            ApiResponse<EmployeeTeamReferenceResponseMapped> localVarResp = createOneEmployeeTeamReferenceWithHttpInfo(createEmployeeTeamReferenceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOneEmployeeTeamReference request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTeamReferenceResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTeamReferenceResponseMapped> executeWithHttpInfo() throws ApiException {
            CreateEmployeeTeamReferenceRequest createEmployeeTeamReferenceRequest = buildBodyParams();
            return createOneEmployeeTeamReferenceWithHttpInfo(createEmployeeTeamReferenceRequest);
        }

        /**
         * Execute createOneEmployeeTeamReference request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTeamReferenceResponseMapped> _callback) throws ApiException {
            CreateEmployeeTeamReferenceRequest createEmployeeTeamReferenceRequest = buildBodyParams();
            return createOneEmployeeTeamReferenceAsync(createEmployeeTeamReferenceRequest, _callback);
        }
    }

    /**
     * Create One EmployeeTeamReference
     * Create One EmployeeTeamReference
     * @param createEmployeeTeamReferenceRequest  (required)
     * @return CreateOneEmployeeTeamReferenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneEmployeeTeamReferenceRequestBuilder createOneEmployeeTeamReference(String teamId, String companyId, String employeeId, String userId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new CreateOneEmployeeTeamReferenceRequestBuilder(teamId, companyId, employeeId, userId);
    }
    private okhttp3.Call deleteOneCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-team-reference/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOneValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOne(Async)");
        }

        return deleteOneCall(id, _callback);

    }


    private ApiResponse<EmptyResponseMapped> deleteOneWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOneValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOneAsync(String id, final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOneValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOneRequestBuilder {
        private final String id;

        private DeleteOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOneCall(id, _callback);
        }


        /**
         * Execute deleteOne request
         * @return EmptyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponseMapped execute() throws ApiException {
            ApiResponse<EmptyResponseMapped> localVarResp = deleteOneWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOne request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponseMapped> executeWithHttpInfo() throws ApiException {
            return deleteOneWithHttpInfo(id);
        }

        /**
         * Execute deleteOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {
            return deleteOneAsync(id, _callback);
        }
    }

    /**
     * Delete One EmployeeTeamReference
     * Delete One EmployeeTeamReference
     * @param id Resource Id (required)
     * @return DeleteOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOneRequestBuilder deleteOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteOneRequestBuilder(id);
    }
    private okhttp3.Call getManyCall(List<String> select, List<String> relations, EmployeeteamreferenceGetManyFiltersParameter filters, Integer limit, Integer offset, EmployeeteamreferenceGetManySortParameter sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-team-reference";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManyValidateBeforeCall(List<String> select, List<String> relations, EmployeeteamreferenceGetManyFiltersParameter filters, Integer limit, Integer offset, EmployeeteamreferenceGetManySortParameter sort, final ApiCallback _callback) throws ApiException {
        return getManyCall(select, relations, filters, limit, offset, sort, _callback);

    }


    private ApiResponse<EmployeeTeamReferencesGetManyResponseMapped> getManyWithHttpInfo(List<String> select, List<String> relations, EmployeeteamreferenceGetManyFiltersParameter filters, Integer limit, Integer offset, EmployeeteamreferenceGetManySortParameter sort) throws ApiException {
        okhttp3.Call localVarCall = getManyValidateBeforeCall(select, relations, filters, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferencesGetManyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getManyAsync(List<String> select, List<String> relations, EmployeeteamreferenceGetManyFiltersParameter filters, Integer limit, Integer offset, EmployeeteamreferenceGetManySortParameter sort, final ApiCallback<EmployeeTeamReferencesGetManyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManyValidateBeforeCall(select, relations, filters, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferencesGetManyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetManyRequestBuilder {
        private List<String> select;
        private List<String> relations;
        private EmployeeteamreferenceGetManyFiltersParameter filters;
        private Integer limit;
        private Integer offset;
        private EmployeeteamreferenceGetManySortParameter sort;

        private GetManyRequestBuilder() {
        }

        /**
         * Set select
         * @param select Select EmployeeTeamReference fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related EmployeeTeamReference resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Set filters
         * @param filters Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder filters(EmployeeteamreferenceGetManyFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit amount of received EmployeeTeamReferences. (e.g. &#x60;limit&#x3D;20&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset amount of received EmployeeTeamReferences. (e.g. &#x60;offset&#x3D;20&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort received EmployeeTeamReferences by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;) (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder sort(EmployeeteamreferenceGetManySortParameter sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getMany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getManyCall(select, relations, filters, limit, offset, sort, _callback);
        }


        /**
         * Execute getMany request
         * @return EmployeeTeamReferencesGetManyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTeamReferencesGetManyResponseMapped execute() throws ApiException {
            ApiResponse<EmployeeTeamReferencesGetManyResponseMapped> localVarResp = getManyWithHttpInfo(select, relations, filters, limit, offset, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMany request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTeamReferencesGetManyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTeamReferencesGetManyResponseMapped> executeWithHttpInfo() throws ApiException {
            return getManyWithHttpInfo(select, relations, filters, limit, offset, sort);
        }

        /**
         * Execute getMany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTeamReferencesGetManyResponseMapped> _callback) throws ApiException {
            return getManyAsync(select, relations, filters, limit, offset, sort, _callback);
        }
    }

    /**
     * Get Many EmployeeTeamReferences
     * Get Many EmployeeTeamReferences
     * @return GetManyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetManyRequestBuilder getMany() throws IllegalArgumentException {
        return new GetManyRequestBuilder();
    }
    private okhttp3.Call getOneEmployeeTeamReferenceCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-team-reference/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneEmployeeTeamReferenceValidateBeforeCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOneEmployeeTeamReference(Async)");
        }

        return getOneEmployeeTeamReferenceCall(id, select, relations, _callback);

    }


    private ApiResponse<EmployeeTeamReferenceGetOneResponseMapped> getOneEmployeeTeamReferenceWithHttpInfo(String id, List<String> select, List<String> relations) throws ApiException {
        okhttp3.Call localVarCall = getOneEmployeeTeamReferenceValidateBeforeCall(id, select, relations, null);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferenceGetOneResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneEmployeeTeamReferenceAsync(String id, List<String> select, List<String> relations, final ApiCallback<EmployeeTeamReferenceGetOneResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneEmployeeTeamReferenceValidateBeforeCall(id, select, relations, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferenceGetOneResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneEmployeeTeamReferenceRequestBuilder {
        private final String id;
        private List<String> select;
        private List<String> relations;

        private GetOneEmployeeTeamReferenceRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set select
         * @param select Select EmployeeTeamReference fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetOneEmployeeTeamReferenceRequestBuilder
         */
        public GetOneEmployeeTeamReferenceRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related EmployeeTeamReference resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return GetOneEmployeeTeamReferenceRequestBuilder
         */
        public GetOneEmployeeTeamReferenceRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Build call for getOneEmployeeTeamReference
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneEmployeeTeamReferenceCall(id, select, relations, _callback);
        }


        /**
         * Execute getOneEmployeeTeamReference request
         * @return EmployeeTeamReferenceGetOneResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTeamReferenceGetOneResponseMapped execute() throws ApiException {
            ApiResponse<EmployeeTeamReferenceGetOneResponseMapped> localVarResp = getOneEmployeeTeamReferenceWithHttpInfo(id, select, relations);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOneEmployeeTeamReference request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTeamReferenceGetOneResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTeamReferenceGetOneResponseMapped> executeWithHttpInfo() throws ApiException {
            return getOneEmployeeTeamReferenceWithHttpInfo(id, select, relations);
        }

        /**
         * Execute getOneEmployeeTeamReference request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTeamReferenceGetOneResponseMapped> _callback) throws ApiException {
            return getOneEmployeeTeamReferenceAsync(id, select, relations, _callback);
        }
    }

    /**
     * Get One EmployeeTeamReference
     * Get One EmployeeTeamReference
     * @param id Resource Id (required)
     * @return GetOneEmployeeTeamReferenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetOneEmployeeTeamReferenceRequestBuilder getOneEmployeeTeamReference(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOneEmployeeTeamReferenceRequestBuilder(id);
    }
    private okhttp3.Call replaceOneCall(String id, UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmployeeTeamReferenceRequest;

        // create path and map variables
        String localVarPath = "/employee-team-reference/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceOneValidateBeforeCall(String id, UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceOne(Async)");
        }

        // verify the required parameter 'updateEmployeeTeamReferenceRequest' is set
        if (updateEmployeeTeamReferenceRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEmployeeTeamReferenceRequest' when calling replaceOne(Async)");
        }

        return replaceOneCall(id, updateEmployeeTeamReferenceRequest, _callback);

    }


    private ApiResponse<EmployeeTeamReferenceResponseMapped> replaceOneWithHttpInfo(String id, UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateEmployeeTeamReferenceRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferenceResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceOneAsync(String id, UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest, final ApiCallback<EmployeeTeamReferenceResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateEmployeeTeamReferenceRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferenceResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceOneRequestBuilder {
        private final String id;
        private String teamId;

        private ReplaceOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set teamId
         * @param teamId  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for replaceOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = buildBodyParams();
            return replaceOneCall(id, updateEmployeeTeamReferenceRequest, _callback);
        }

        private UpdateEmployeeTeamReferenceRequest buildBodyParams() {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = new UpdateEmployeeTeamReferenceRequest();
            updateEmployeeTeamReferenceRequest.teamId(this.teamId);
            return updateEmployeeTeamReferenceRequest;
        }

        /**
         * Execute replaceOne request
         * @return EmployeeTeamReferenceResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTeamReferenceResponseMapped execute() throws ApiException {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = buildBodyParams();
            ApiResponse<EmployeeTeamReferenceResponseMapped> localVarResp = replaceOneWithHttpInfo(id, updateEmployeeTeamReferenceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceOne request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTeamReferenceResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTeamReferenceResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = buildBodyParams();
            return replaceOneWithHttpInfo(id, updateEmployeeTeamReferenceRequest);
        }

        /**
         * Execute replaceOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTeamReferenceResponseMapped> _callback) throws ApiException {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = buildBodyParams();
            return replaceOneAsync(id, updateEmployeeTeamReferenceRequest, _callback);
        }
    }

    /**
     * Replace One EmployeeTeamReference
     * Replace One EmployeeTeamReference
     * @param id Resource Id (required)
     * @param updateEmployeeTeamReferenceRequest  (required)
     * @return ReplaceOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceOneRequestBuilder replaceOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReplaceOneRequestBuilder(id);
    }
    private okhttp3.Call updateOneEmployeeTeamReferenceCall(String id, UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmployeeTeamReferenceRequest;

        // create path and map variables
        String localVarPath = "/employee-team-reference/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOneEmployeeTeamReferenceValidateBeforeCall(String id, UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOneEmployeeTeamReference(Async)");
        }

        // verify the required parameter 'updateEmployeeTeamReferenceRequest' is set
        if (updateEmployeeTeamReferenceRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEmployeeTeamReferenceRequest' when calling updateOneEmployeeTeamReference(Async)");
        }

        return updateOneEmployeeTeamReferenceCall(id, updateEmployeeTeamReferenceRequest, _callback);

    }


    private ApiResponse<EmployeeTeamReferenceResponseMapped> updateOneEmployeeTeamReferenceWithHttpInfo(String id, UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOneEmployeeTeamReferenceValidateBeforeCall(id, updateEmployeeTeamReferenceRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferenceResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOneEmployeeTeamReferenceAsync(String id, UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest, final ApiCallback<EmployeeTeamReferenceResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOneEmployeeTeamReferenceValidateBeforeCall(id, updateEmployeeTeamReferenceRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTeamReferenceResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOneEmployeeTeamReferenceRequestBuilder {
        private final String id;
        private String teamId;

        private UpdateOneEmployeeTeamReferenceRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set teamId
         * @param teamId  (optional)
         * @return UpdateOneEmployeeTeamReferenceRequestBuilder
         */
        public UpdateOneEmployeeTeamReferenceRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for updateOneEmployeeTeamReference
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = buildBodyParams();
            return updateOneEmployeeTeamReferenceCall(id, updateEmployeeTeamReferenceRequest, _callback);
        }

        private UpdateEmployeeTeamReferenceRequest buildBodyParams() {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = new UpdateEmployeeTeamReferenceRequest();
            updateEmployeeTeamReferenceRequest.teamId(this.teamId);
            return updateEmployeeTeamReferenceRequest;
        }

        /**
         * Execute updateOneEmployeeTeamReference request
         * @return EmployeeTeamReferenceResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTeamReferenceResponseMapped execute() throws ApiException {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = buildBodyParams();
            ApiResponse<EmployeeTeamReferenceResponseMapped> localVarResp = updateOneEmployeeTeamReferenceWithHttpInfo(id, updateEmployeeTeamReferenceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOneEmployeeTeamReference request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTeamReferenceResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTeamReferenceResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = buildBodyParams();
            return updateOneEmployeeTeamReferenceWithHttpInfo(id, updateEmployeeTeamReferenceRequest);
        }

        /**
         * Execute updateOneEmployeeTeamReference request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTeamReferenceResponseMapped> _callback) throws ApiException {
            UpdateEmployeeTeamReferenceRequest updateEmployeeTeamReferenceRequest = buildBodyParams();
            return updateOneEmployeeTeamReferenceAsync(id, updateEmployeeTeamReferenceRequest, _callback);
        }
    }

    /**
     * Update One EmployeeTeamReference
     * Update One EmployeeTeamReference
     * @param id Resource Id (required)
     * @param updateEmployeeTeamReferenceRequest  (required)
     * @return UpdateOneEmployeeTeamReferenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOneEmployeeTeamReferenceRequestBuilder updateOneEmployeeTeamReference(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateOneEmployeeTeamReferenceRequestBuilder(id);
    }
}
