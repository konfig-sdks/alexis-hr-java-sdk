/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateLeaveRequest;
import com.konfigthis.client.model.EmptyResponseMapped;
import com.konfigthis.client.model.LeaveGetManyLeavesFiltersParameter;
import com.konfigthis.client.model.LeaveGetManyLeavesSortParameter;
import com.konfigthis.client.model.LeaveGetOneResponseMapped;
import com.konfigthis.client.model.LeaveResponseMapped;
import com.konfigthis.client.model.LeavesGetManyResponseMapped;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UpdateLeaveRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LeaveApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LeaveApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LeaveApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOneCall(CreateLeaveRequest createLeaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLeaveRequest;

        // create path and map variables
        String localVarPath = "/leave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneValidateBeforeCall(CreateLeaveRequest createLeaveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createLeaveRequest' is set
        if (createLeaveRequest == null) {
            throw new ApiException("Missing the required parameter 'createLeaveRequest' when calling createOne(Async)");
        }

        return createOneCall(createLeaveRequest, _callback);

    }


    private ApiResponse<LeaveResponseMapped> createOneWithHttpInfo(CreateLeaveRequest createLeaveRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneValidateBeforeCall(createLeaveRequest, null);
        Type localVarReturnType = new TypeToken<LeaveResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneAsync(CreateLeaveRequest createLeaveRequest, final ApiCallback<LeaveResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneValidateBeforeCall(createLeaveRequest, _callback);
        Type localVarReturnType = new TypeToken<LeaveResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneRequestBuilder {
        private final String employeeId;
        private final String typeId;
        private final String duration;
        private final OffsetDateTime startDate;
        private final OffsetDateTime endDate;
        private String description;
        private String childId;
        private Double extent;
        private Object morning;
        private Object afternoon;

        private CreateOneRequestBuilder(String employeeId, String typeId, String duration, OffsetDateTime startDate, OffsetDateTime endDate) {
            this.employeeId = employeeId;
            this.typeId = typeId;
            this.duration = duration;
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateOneRequestBuilder
         */
        public CreateOneRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set childId
         * @param childId  (optional)
         * @return CreateOneRequestBuilder
         */
        public CreateOneRequestBuilder childId(String childId) {
            this.childId = childId;
            return this;
        }
        
        /**
         * Set extent
         * @param extent  (optional)
         * @return CreateOneRequestBuilder
         */
        public CreateOneRequestBuilder extent(Double extent) {
            this.extent = extent;
            return this;
        }
        
        /**
         * Set morning
         * @param morning  (optional)
         * @return CreateOneRequestBuilder
         */
        public CreateOneRequestBuilder morning(Object morning) {
            this.morning = morning;
            return this;
        }
        
        /**
         * Set afternoon
         * @param afternoon  (optional)
         * @return CreateOneRequestBuilder
         */
        public CreateOneRequestBuilder afternoon(Object afternoon) {
            this.afternoon = afternoon;
            return this;
        }
        
        /**
         * Build call for createOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateLeaveRequest createLeaveRequest = buildBodyParams();
            return createOneCall(createLeaveRequest, _callback);
        }

        private CreateLeaveRequest buildBodyParams() {
            CreateLeaveRequest createLeaveRequest = new CreateLeaveRequest();
            createLeaveRequest.description(this.description);
            createLeaveRequest.employeeId(this.employeeId);
            createLeaveRequest.typeId(this.typeId);
            createLeaveRequest.childId(this.childId);
            if (this.duration != null)
            createLeaveRequest.duration(CreateLeaveRequest.DurationEnum.fromValue(this.duration));
            createLeaveRequest.startDate(this.startDate);
            createLeaveRequest.endDate(this.endDate);
            createLeaveRequest.extent(this.extent);
            createLeaveRequest.morning(this.morning);
            createLeaveRequest.afternoon(this.afternoon);
            return createLeaveRequest;
        }

        /**
         * Execute createOne request
         * @return LeaveResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public LeaveResponseMapped execute() throws ApiException {
            CreateLeaveRequest createLeaveRequest = buildBodyParams();
            ApiResponse<LeaveResponseMapped> localVarResp = createOneWithHttpInfo(createLeaveRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOne request with HTTP info returned
         * @return ApiResponse&lt;LeaveResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveResponseMapped> executeWithHttpInfo() throws ApiException {
            CreateLeaveRequest createLeaveRequest = buildBodyParams();
            return createOneWithHttpInfo(createLeaveRequest);
        }

        /**
         * Execute createOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveResponseMapped> _callback) throws ApiException {
            CreateLeaveRequest createLeaveRequest = buildBodyParams();
            return createOneAsync(createLeaveRequest, _callback);
        }
    }

    /**
     * Create One Leave
     * Create One Leave
     * @param createLeaveRequest  (required)
     * @return CreateOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneRequestBuilder createOne(String employeeId, String typeId, String duration, OffsetDateTime startDate, OffsetDateTime endDate) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (typeId == null) throw new IllegalArgumentException("\"typeId\" is required but got null");
            

        if (duration == null) throw new IllegalArgumentException("\"duration\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        return new CreateOneRequestBuilder(employeeId, typeId, duration, startDate, endDate);
    }
    private okhttp3.Call deleteOneLeaveCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOneLeaveValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOneLeave(Async)");
        }

        return deleteOneLeaveCall(id, _callback);

    }


    private ApiResponse<EmptyResponseMapped> deleteOneLeaveWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOneLeaveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOneLeaveAsync(String id, final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOneLeaveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOneLeaveRequestBuilder {
        private final String id;

        private DeleteOneLeaveRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteOneLeave
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOneLeaveCall(id, _callback);
        }


        /**
         * Execute deleteOneLeave request
         * @return EmptyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponseMapped execute() throws ApiException {
            ApiResponse<EmptyResponseMapped> localVarResp = deleteOneLeaveWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOneLeave request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponseMapped> executeWithHttpInfo() throws ApiException {
            return deleteOneLeaveWithHttpInfo(id);
        }

        /**
         * Execute deleteOneLeave request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {
            return deleteOneLeaveAsync(id, _callback);
        }
    }

    /**
     * Delete One Leave
     * Delete One Leave
     * @param id Resource Id (required)
     * @return DeleteOneLeaveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOneLeaveRequestBuilder deleteOneLeave(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteOneLeaveRequestBuilder(id);
    }
    private okhttp3.Call getManyLeavesCall(List<String> select, List<String> relations, LeaveGetManyLeavesFiltersParameter filters, Integer limit, Integer offset, LeaveGetManyLeavesSortParameter sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManyLeavesValidateBeforeCall(List<String> select, List<String> relations, LeaveGetManyLeavesFiltersParameter filters, Integer limit, Integer offset, LeaveGetManyLeavesSortParameter sort, final ApiCallback _callback) throws ApiException {
        return getManyLeavesCall(select, relations, filters, limit, offset, sort, _callback);

    }


    private ApiResponse<LeavesGetManyResponseMapped> getManyLeavesWithHttpInfo(List<String> select, List<String> relations, LeaveGetManyLeavesFiltersParameter filters, Integer limit, Integer offset, LeaveGetManyLeavesSortParameter sort) throws ApiException {
        okhttp3.Call localVarCall = getManyLeavesValidateBeforeCall(select, relations, filters, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<LeavesGetManyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getManyLeavesAsync(List<String> select, List<String> relations, LeaveGetManyLeavesFiltersParameter filters, Integer limit, Integer offset, LeaveGetManyLeavesSortParameter sort, final ApiCallback<LeavesGetManyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManyLeavesValidateBeforeCall(select, relations, filters, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<LeavesGetManyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetManyLeavesRequestBuilder {
        private List<String> select;
        private List<String> relations;
        private LeaveGetManyLeavesFiltersParameter filters;
        private Integer limit;
        private Integer offset;
        private LeaveGetManyLeavesSortParameter sort;

        private GetManyLeavesRequestBuilder() {
        }

        /**
         * Set select
         * @param select Select Leave fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetManyLeavesRequestBuilder
         */
        public GetManyLeavesRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related Leave resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return GetManyLeavesRequestBuilder
         */
        public GetManyLeavesRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Set filters
         * @param filters Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;) (optional)
         * @return GetManyLeavesRequestBuilder
         */
        public GetManyLeavesRequestBuilder filters(LeaveGetManyLeavesFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit amount of received Leaves. (e.g. &#x60;limit&#x3D;20&#x60;) (optional)
         * @return GetManyLeavesRequestBuilder
         */
        public GetManyLeavesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset amount of received Leaves. (e.g. &#x60;offset&#x3D;20&#x60;) (optional)
         * @return GetManyLeavesRequestBuilder
         */
        public GetManyLeavesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort received Leaves by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;) (optional)
         * @return GetManyLeavesRequestBuilder
         */
        public GetManyLeavesRequestBuilder sort(LeaveGetManyLeavesSortParameter sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getManyLeaves
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getManyLeavesCall(select, relations, filters, limit, offset, sort, _callback);
        }


        /**
         * Execute getManyLeaves request
         * @return LeavesGetManyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public LeavesGetManyResponseMapped execute() throws ApiException {
            ApiResponse<LeavesGetManyResponseMapped> localVarResp = getManyLeavesWithHttpInfo(select, relations, filters, limit, offset, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getManyLeaves request with HTTP info returned
         * @return ApiResponse&lt;LeavesGetManyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeavesGetManyResponseMapped> executeWithHttpInfo() throws ApiException {
            return getManyLeavesWithHttpInfo(select, relations, filters, limit, offset, sort);
        }

        /**
         * Execute getManyLeaves request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeavesGetManyResponseMapped> _callback) throws ApiException {
            return getManyLeavesAsync(select, relations, filters, limit, offset, sort, _callback);
        }
    }

    /**
     * Get Many Leaves
     * Get Many Leaves
     * @return GetManyLeavesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetManyLeavesRequestBuilder getManyLeaves() throws IllegalArgumentException {
        return new GetManyLeavesRequestBuilder();
    }
    private okhttp3.Call getOneLeaveCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneLeaveValidateBeforeCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOneLeave(Async)");
        }

        return getOneLeaveCall(id, select, relations, _callback);

    }


    private ApiResponse<LeaveGetOneResponseMapped> getOneLeaveWithHttpInfo(String id, List<String> select, List<String> relations) throws ApiException {
        okhttp3.Call localVarCall = getOneLeaveValidateBeforeCall(id, select, relations, null);
        Type localVarReturnType = new TypeToken<LeaveGetOneResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneLeaveAsync(String id, List<String> select, List<String> relations, final ApiCallback<LeaveGetOneResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneLeaveValidateBeforeCall(id, select, relations, _callback);
        Type localVarReturnType = new TypeToken<LeaveGetOneResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneLeaveRequestBuilder {
        private final String id;
        private List<String> select;
        private List<String> relations;

        private GetOneLeaveRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set select
         * @param select Select Leave fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetOneLeaveRequestBuilder
         */
        public GetOneLeaveRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related Leave resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return GetOneLeaveRequestBuilder
         */
        public GetOneLeaveRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Build call for getOneLeave
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneLeaveCall(id, select, relations, _callback);
        }


        /**
         * Execute getOneLeave request
         * @return LeaveGetOneResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public LeaveGetOneResponseMapped execute() throws ApiException {
            ApiResponse<LeaveGetOneResponseMapped> localVarResp = getOneLeaveWithHttpInfo(id, select, relations);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOneLeave request with HTTP info returned
         * @return ApiResponse&lt;LeaveGetOneResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveGetOneResponseMapped> executeWithHttpInfo() throws ApiException {
            return getOneLeaveWithHttpInfo(id, select, relations);
        }

        /**
         * Execute getOneLeave request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveGetOneResponseMapped> _callback) throws ApiException {
            return getOneLeaveAsync(id, select, relations, _callback);
        }
    }

    /**
     * Get One Leave
     * Get One Leave
     * @param id Resource Id (required)
     * @return GetOneLeaveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetOneLeaveRequestBuilder getOneLeave(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOneLeaveRequestBuilder(id);
    }
    private okhttp3.Call replaceOneCall(String id, UpdateLeaveRequest updateLeaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateLeaveRequest;

        // create path and map variables
        String localVarPath = "/leave/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceOneValidateBeforeCall(String id, UpdateLeaveRequest updateLeaveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceOne(Async)");
        }

        // verify the required parameter 'updateLeaveRequest' is set
        if (updateLeaveRequest == null) {
            throw new ApiException("Missing the required parameter 'updateLeaveRequest' when calling replaceOne(Async)");
        }

        return replaceOneCall(id, updateLeaveRequest, _callback);

    }


    private ApiResponse<LeaveResponseMapped> replaceOneWithHttpInfo(String id, UpdateLeaveRequest updateLeaveRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateLeaveRequest, null);
        Type localVarReturnType = new TypeToken<LeaveResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceOneAsync(String id, UpdateLeaveRequest updateLeaveRequest, final ApiCallback<LeaveResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateLeaveRequest, _callback);
        Type localVarReturnType = new TypeToken<LeaveResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceOneRequestBuilder {
        private final Double extent;
        private final String id;
        private String description;
        private String childId;
        private String duration;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private Boolean morning;
        private Boolean afternoon;
        private String status;
        private String approvalNote;

        private ReplaceOneRequestBuilder(double extent, String id) {
            this.extent = extent;
            this.id = id;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set childId
         * @param childId  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder childId(String childId) {
            this.childId = childId;
            return this;
        }
        
        /**
         * Set duration
         * @param duration  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder duration(String duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set morning
         * @param morning  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder morning(Boolean morning) {
            this.morning = morning;
            return this;
        }
        
        /**
         * Set afternoon
         * @param afternoon  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder afternoon(Boolean afternoon) {
            this.afternoon = afternoon;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set approvalNote
         * @param approvalNote  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder approvalNote(String approvalNote) {
            this.approvalNote = approvalNote;
            return this;
        }
        
        /**
         * Build call for replaceOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateLeaveRequest updateLeaveRequest = buildBodyParams();
            return replaceOneCall(id, updateLeaveRequest, _callback);
        }

        private UpdateLeaveRequest buildBodyParams() {
            UpdateLeaveRequest updateLeaveRequest = new UpdateLeaveRequest();
            updateLeaveRequest.description(this.description);
            updateLeaveRequest.childId(this.childId);
            if (this.duration != null)
            updateLeaveRequest.duration(UpdateLeaveRequest.DurationEnum.fromValue(this.duration));
            updateLeaveRequest.startDate(this.startDate);
            updateLeaveRequest.endDate(this.endDate);
            updateLeaveRequest.extent(this.extent);
            updateLeaveRequest.morning(this.morning);
            updateLeaveRequest.afternoon(this.afternoon);
            updateLeaveRequest.status(this.status);
            updateLeaveRequest.approvalNote(this.approvalNote);
            return updateLeaveRequest;
        }

        /**
         * Execute replaceOne request
         * @return LeaveResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public LeaveResponseMapped execute() throws ApiException {
            UpdateLeaveRequest updateLeaveRequest = buildBodyParams();
            ApiResponse<LeaveResponseMapped> localVarResp = replaceOneWithHttpInfo(id, updateLeaveRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceOne request with HTTP info returned
         * @return ApiResponse&lt;LeaveResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateLeaveRequest updateLeaveRequest = buildBodyParams();
            return replaceOneWithHttpInfo(id, updateLeaveRequest);
        }

        /**
         * Execute replaceOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveResponseMapped> _callback) throws ApiException {
            UpdateLeaveRequest updateLeaveRequest = buildBodyParams();
            return replaceOneAsync(id, updateLeaveRequest, _callback);
        }
    }

    /**
     * Replace One Leave
     * Replace One Leave
     * @param id Resource Id (required)
     * @param updateLeaveRequest  (required)
     * @return ReplaceOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceOneRequestBuilder replaceOne(double extent, String id) throws IllegalArgumentException {
        
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReplaceOneRequestBuilder(extent, id);
    }
    private okhttp3.Call updateOneLeaveCall(String id, UpdateLeaveRequest updateLeaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateLeaveRequest;

        // create path and map variables
        String localVarPath = "/leave/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOneLeaveValidateBeforeCall(String id, UpdateLeaveRequest updateLeaveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOneLeave(Async)");
        }

        // verify the required parameter 'updateLeaveRequest' is set
        if (updateLeaveRequest == null) {
            throw new ApiException("Missing the required parameter 'updateLeaveRequest' when calling updateOneLeave(Async)");
        }

        return updateOneLeaveCall(id, updateLeaveRequest, _callback);

    }


    private ApiResponse<LeaveResponseMapped> updateOneLeaveWithHttpInfo(String id, UpdateLeaveRequest updateLeaveRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOneLeaveValidateBeforeCall(id, updateLeaveRequest, null);
        Type localVarReturnType = new TypeToken<LeaveResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOneLeaveAsync(String id, UpdateLeaveRequest updateLeaveRequest, final ApiCallback<LeaveResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOneLeaveValidateBeforeCall(id, updateLeaveRequest, _callback);
        Type localVarReturnType = new TypeToken<LeaveResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOneLeaveRequestBuilder {
        private final Double extent;
        private final String id;
        private String description;
        private String childId;
        private String duration;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private Boolean morning;
        private Boolean afternoon;
        private String status;
        private String approvalNote;

        private UpdateOneLeaveRequestBuilder(double extent, String id) {
            this.extent = extent;
            this.id = id;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateOneLeaveRequestBuilder
         */
        public UpdateOneLeaveRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set childId
         * @param childId  (optional)
         * @return UpdateOneLeaveRequestBuilder
         */
        public UpdateOneLeaveRequestBuilder childId(String childId) {
            this.childId = childId;
            return this;
        }
        
        /**
         * Set duration
         * @param duration  (optional)
         * @return UpdateOneLeaveRequestBuilder
         */
        public UpdateOneLeaveRequestBuilder duration(String duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return UpdateOneLeaveRequestBuilder
         */
        public UpdateOneLeaveRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return UpdateOneLeaveRequestBuilder
         */
        public UpdateOneLeaveRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set morning
         * @param morning  (optional)
         * @return UpdateOneLeaveRequestBuilder
         */
        public UpdateOneLeaveRequestBuilder morning(Boolean morning) {
            this.morning = morning;
            return this;
        }
        
        /**
         * Set afternoon
         * @param afternoon  (optional)
         * @return UpdateOneLeaveRequestBuilder
         */
        public UpdateOneLeaveRequestBuilder afternoon(Boolean afternoon) {
            this.afternoon = afternoon;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateOneLeaveRequestBuilder
         */
        public UpdateOneLeaveRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set approvalNote
         * @param approvalNote  (optional)
         * @return UpdateOneLeaveRequestBuilder
         */
        public UpdateOneLeaveRequestBuilder approvalNote(String approvalNote) {
            this.approvalNote = approvalNote;
            return this;
        }
        
        /**
         * Build call for updateOneLeave
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateLeaveRequest updateLeaveRequest = buildBodyParams();
            return updateOneLeaveCall(id, updateLeaveRequest, _callback);
        }

        private UpdateLeaveRequest buildBodyParams() {
            UpdateLeaveRequest updateLeaveRequest = new UpdateLeaveRequest();
            updateLeaveRequest.description(this.description);
            updateLeaveRequest.childId(this.childId);
            if (this.duration != null)
            updateLeaveRequest.duration(UpdateLeaveRequest.DurationEnum.fromValue(this.duration));
            updateLeaveRequest.startDate(this.startDate);
            updateLeaveRequest.endDate(this.endDate);
            updateLeaveRequest.extent(this.extent);
            updateLeaveRequest.morning(this.morning);
            updateLeaveRequest.afternoon(this.afternoon);
            updateLeaveRequest.status(this.status);
            updateLeaveRequest.approvalNote(this.approvalNote);
            return updateLeaveRequest;
        }

        /**
         * Execute updateOneLeave request
         * @return LeaveResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public LeaveResponseMapped execute() throws ApiException {
            UpdateLeaveRequest updateLeaveRequest = buildBodyParams();
            ApiResponse<LeaveResponseMapped> localVarResp = updateOneLeaveWithHttpInfo(id, updateLeaveRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOneLeave request with HTTP info returned
         * @return ApiResponse&lt;LeaveResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateLeaveRequest updateLeaveRequest = buildBodyParams();
            return updateOneLeaveWithHttpInfo(id, updateLeaveRequest);
        }

        /**
         * Execute updateOneLeave request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveResponseMapped> _callback) throws ApiException {
            UpdateLeaveRequest updateLeaveRequest = buildBodyParams();
            return updateOneLeaveAsync(id, updateLeaveRequest, _callback);
        }
    }

    /**
     * Update One Leave
     * Update One Leave
     * @param id Resource Id (required)
     * @param updateLeaveRequest  (required)
     * @return UpdateOneLeaveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOneLeaveRequestBuilder updateOneLeave(double extent, String id) throws IllegalArgumentException {
        
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateOneLeaveRequestBuilder(extent, id);
    }
}
