/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateEmploymentRequest;
import com.konfigthis.client.model.EmploymentGetOneResponseMapped;
import com.konfigthis.client.model.EmploymentListManyEmploymentsFiltersParameter;
import com.konfigthis.client.model.EmploymentListManyEmploymentsSortParameter;
import com.konfigthis.client.model.EmploymentResponseMapped;
import com.konfigthis.client.model.EmploymentsGetManyResponseMapped;
import com.konfigthis.client.model.EmptyResponseMapped;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UpdateEmploymentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmploymentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmploymentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmploymentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOneEmploymentCall(CreateEmploymentRequest createEmploymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEmploymentRequest;

        // create path and map variables
        String localVarPath = "/employment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneEmploymentValidateBeforeCall(CreateEmploymentRequest createEmploymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createEmploymentRequest' is set
        if (createEmploymentRequest == null) {
            throw new ApiException("Missing the required parameter 'createEmploymentRequest' when calling createOneEmployment(Async)");
        }

        return createOneEmploymentCall(createEmploymentRequest, _callback);

    }


    private ApiResponse<EmploymentResponseMapped> createOneEmploymentWithHttpInfo(CreateEmploymentRequest createEmploymentRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneEmploymentValidateBeforeCall(createEmploymentRequest, null);
        Type localVarReturnType = new TypeToken<EmploymentResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneEmploymentAsync(CreateEmploymentRequest createEmploymentRequest, final ApiCallback<EmploymentResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneEmploymentValidateBeforeCall(createEmploymentRequest, _callback);
        Type localVarReturnType = new TypeToken<EmploymentResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneEmploymentRequestBuilder {
        private final String employeeId;
        private final String userId;
        private final String typeId;
        private final OffsetDateTime startDate;
        private final Boolean terminated;
        private final Double rate;
        private final String country;
        private OffsetDateTime endDate;
        private OffsetDateTime effectiveEndDate;
        private String note;

        private CreateOneEmploymentRequestBuilder(String employeeId, String userId, String typeId, OffsetDateTime startDate, Boolean terminated, double rate, String country) {
            this.employeeId = employeeId;
            this.userId = userId;
            this.typeId = typeId;
            this.startDate = startDate;
            this.terminated = terminated;
            this.rate = rate;
            this.country = country;
        }

        /**
         * Set endDate
         * @param endDate  (optional)
         * @return CreateOneEmploymentRequestBuilder
         */
        public CreateOneEmploymentRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set effectiveEndDate
         * @param effectiveEndDate  (optional)
         * @return CreateOneEmploymentRequestBuilder
         */
        public CreateOneEmploymentRequestBuilder effectiveEndDate(OffsetDateTime effectiveEndDate) {
            this.effectiveEndDate = effectiveEndDate;
            return this;
        }
        
        /**
         * Set note
         * @param note  (optional)
         * @return CreateOneEmploymentRequestBuilder
         */
        public CreateOneEmploymentRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for createOneEmployment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateEmploymentRequest createEmploymentRequest = buildBodyParams();
            return createOneEmploymentCall(createEmploymentRequest, _callback);
        }

        private CreateEmploymentRequest buildBodyParams() {
            CreateEmploymentRequest createEmploymentRequest = new CreateEmploymentRequest();
            createEmploymentRequest.employeeId(this.employeeId);
            createEmploymentRequest.userId(this.userId);
            createEmploymentRequest.typeId(this.typeId);
            createEmploymentRequest.startDate(this.startDate);
            createEmploymentRequest.endDate(this.endDate);
            createEmploymentRequest.effectiveEndDate(this.effectiveEndDate);
            createEmploymentRequest.terminated(this.terminated);
            createEmploymentRequest.rate(this.rate);
            createEmploymentRequest.note(this.note);
            if (this.country != null)
            createEmploymentRequest.country(CreateEmploymentRequest.CountryEnum.fromValue(this.country));
            return createEmploymentRequest;
        }

        /**
         * Execute createOneEmployment request
         * @return EmploymentResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentResponseMapped execute() throws ApiException {
            CreateEmploymentRequest createEmploymentRequest = buildBodyParams();
            ApiResponse<EmploymentResponseMapped> localVarResp = createOneEmploymentWithHttpInfo(createEmploymentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOneEmployment request with HTTP info returned
         * @return ApiResponse&lt;EmploymentResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentResponseMapped> executeWithHttpInfo() throws ApiException {
            CreateEmploymentRequest createEmploymentRequest = buildBodyParams();
            return createOneEmploymentWithHttpInfo(createEmploymentRequest);
        }

        /**
         * Execute createOneEmployment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentResponseMapped> _callback) throws ApiException {
            CreateEmploymentRequest createEmploymentRequest = buildBodyParams();
            return createOneEmploymentAsync(createEmploymentRequest, _callback);
        }
    }

    /**
     * Create One Employment
     * Create One Employment
     * @param createEmploymentRequest  (required)
     * @return CreateOneEmploymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneEmploymentRequestBuilder createOneEmployment(String employeeId, String userId, String typeId, OffsetDateTime startDate, Boolean terminated, double rate, String country) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (typeId == null) throw new IllegalArgumentException("\"typeId\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (terminated == null) throw new IllegalArgumentException("\"terminated\" is required but got null");
        
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new CreateOneEmploymentRequestBuilder(employeeId, userId, typeId, startDate, terminated, rate, country);
    }
    private okhttp3.Call getOneCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employment/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneValidateBeforeCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOne(Async)");
        }

        return getOneCall(id, select, relations, _callback);

    }


    private ApiResponse<EmploymentGetOneResponseMapped> getOneWithHttpInfo(String id, List<String> select, List<String> relations) throws ApiException {
        okhttp3.Call localVarCall = getOneValidateBeforeCall(id, select, relations, null);
        Type localVarReturnType = new TypeToken<EmploymentGetOneResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneAsync(String id, List<String> select, List<String> relations, final ApiCallback<EmploymentGetOneResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneValidateBeforeCall(id, select, relations, _callback);
        Type localVarReturnType = new TypeToken<EmploymentGetOneResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneRequestBuilder {
        private final String id;
        private List<String> select;
        private List<String> relations;

        private GetOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set select
         * @param select Select Employment fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetOneRequestBuilder
         */
        public GetOneRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related Employment resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return GetOneRequestBuilder
         */
        public GetOneRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Build call for getOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneCall(id, select, relations, _callback);
        }


        /**
         * Execute getOne request
         * @return EmploymentGetOneResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentGetOneResponseMapped execute() throws ApiException {
            ApiResponse<EmploymentGetOneResponseMapped> localVarResp = getOneWithHttpInfo(id, select, relations);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOne request with HTTP info returned
         * @return ApiResponse&lt;EmploymentGetOneResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentGetOneResponseMapped> executeWithHttpInfo() throws ApiException {
            return getOneWithHttpInfo(id, select, relations);
        }

        /**
         * Execute getOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentGetOneResponseMapped> _callback) throws ApiException {
            return getOneAsync(id, select, relations, _callback);
        }
    }

    /**
     * Get One Employment
     * Get One Employment
     * @param id Resource Id (required)
     * @return GetOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetOneRequestBuilder getOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOneRequestBuilder(id);
    }
    private okhttp3.Call listManyEmploymentsCall(List<String> select, List<String> relations, EmploymentListManyEmploymentsFiltersParameter filters, Integer limit, Integer offset, EmploymentListManyEmploymentsSortParameter sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listManyEmploymentsValidateBeforeCall(List<String> select, List<String> relations, EmploymentListManyEmploymentsFiltersParameter filters, Integer limit, Integer offset, EmploymentListManyEmploymentsSortParameter sort, final ApiCallback _callback) throws ApiException {
        return listManyEmploymentsCall(select, relations, filters, limit, offset, sort, _callback);

    }


    private ApiResponse<EmploymentsGetManyResponseMapped> listManyEmploymentsWithHttpInfo(List<String> select, List<String> relations, EmploymentListManyEmploymentsFiltersParameter filters, Integer limit, Integer offset, EmploymentListManyEmploymentsSortParameter sort) throws ApiException {
        okhttp3.Call localVarCall = listManyEmploymentsValidateBeforeCall(select, relations, filters, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<EmploymentsGetManyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listManyEmploymentsAsync(List<String> select, List<String> relations, EmploymentListManyEmploymentsFiltersParameter filters, Integer limit, Integer offset, EmploymentListManyEmploymentsSortParameter sort, final ApiCallback<EmploymentsGetManyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = listManyEmploymentsValidateBeforeCall(select, relations, filters, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<EmploymentsGetManyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListManyEmploymentsRequestBuilder {
        private List<String> select;
        private List<String> relations;
        private EmploymentListManyEmploymentsFiltersParameter filters;
        private Integer limit;
        private Integer offset;
        private EmploymentListManyEmploymentsSortParameter sort;

        private ListManyEmploymentsRequestBuilder() {
        }

        /**
         * Set select
         * @param select Select Employment fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return ListManyEmploymentsRequestBuilder
         */
        public ListManyEmploymentsRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related Employment resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return ListManyEmploymentsRequestBuilder
         */
        public ListManyEmploymentsRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Set filters
         * @param filters Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;) (optional)
         * @return ListManyEmploymentsRequestBuilder
         */
        public ListManyEmploymentsRequestBuilder filters(EmploymentListManyEmploymentsFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit amount of received Employments. (e.g. &#x60;limit&#x3D;20&#x60;) (optional)
         * @return ListManyEmploymentsRequestBuilder
         */
        public ListManyEmploymentsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset amount of received Employments. (e.g. &#x60;offset&#x3D;20&#x60;) (optional)
         * @return ListManyEmploymentsRequestBuilder
         */
        public ListManyEmploymentsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort received Employments by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;) (optional)
         * @return ListManyEmploymentsRequestBuilder
         */
        public ListManyEmploymentsRequestBuilder sort(EmploymentListManyEmploymentsSortParameter sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listManyEmployments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listManyEmploymentsCall(select, relations, filters, limit, offset, sort, _callback);
        }


        /**
         * Execute listManyEmployments request
         * @return EmploymentsGetManyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentsGetManyResponseMapped execute() throws ApiException {
            ApiResponse<EmploymentsGetManyResponseMapped> localVarResp = listManyEmploymentsWithHttpInfo(select, relations, filters, limit, offset, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listManyEmployments request with HTTP info returned
         * @return ApiResponse&lt;EmploymentsGetManyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentsGetManyResponseMapped> executeWithHttpInfo() throws ApiException {
            return listManyEmploymentsWithHttpInfo(select, relations, filters, limit, offset, sort);
        }

        /**
         * Execute listManyEmployments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentsGetManyResponseMapped> _callback) throws ApiException {
            return listManyEmploymentsAsync(select, relations, filters, limit, offset, sort, _callback);
        }
    }

    /**
     * Get Many Employments
     * Get Many Employments
     * @return ListManyEmploymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListManyEmploymentsRequestBuilder listManyEmployments() throws IllegalArgumentException {
        return new ListManyEmploymentsRequestBuilder();
    }
    private okhttp3.Call removeOneCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employment/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOneValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeOne(Async)");
        }

        return removeOneCall(id, _callback);

    }


    private ApiResponse<EmptyResponseMapped> removeOneWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = removeOneValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeOneAsync(String id, final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOneValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveOneRequestBuilder {
        private final String id;

        private RemoveOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for removeOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeOneCall(id, _callback);
        }


        /**
         * Execute removeOne request
         * @return EmptyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponseMapped execute() throws ApiException {
            ApiResponse<EmptyResponseMapped> localVarResp = removeOneWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeOne request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponseMapped> executeWithHttpInfo() throws ApiException {
            return removeOneWithHttpInfo(id);
        }

        /**
         * Execute removeOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {
            return removeOneAsync(id, _callback);
        }
    }

    /**
     * Delete One Employment
     * Delete One Employment
     * @param id Resource Id (required)
     * @return RemoveOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveOneRequestBuilder removeOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveOneRequestBuilder(id);
    }
    private okhttp3.Call replaceOneCall(String id, UpdateEmploymentRequest updateEmploymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmploymentRequest;

        // create path and map variables
        String localVarPath = "/employment/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceOneValidateBeforeCall(String id, UpdateEmploymentRequest updateEmploymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceOne(Async)");
        }

        // verify the required parameter 'updateEmploymentRequest' is set
        if (updateEmploymentRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEmploymentRequest' when calling replaceOne(Async)");
        }

        return replaceOneCall(id, updateEmploymentRequest, _callback);

    }


    private ApiResponse<EmploymentResponseMapped> replaceOneWithHttpInfo(String id, UpdateEmploymentRequest updateEmploymentRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateEmploymentRequest, null);
        Type localVarReturnType = new TypeToken<EmploymentResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceOneAsync(String id, UpdateEmploymentRequest updateEmploymentRequest, final ApiCallback<EmploymentResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceOneValidateBeforeCall(id, updateEmploymentRequest, _callback);
        Type localVarReturnType = new TypeToken<EmploymentResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceOneRequestBuilder {
        private final String id;
        private String employeeId;
        private String userId;
        private String typeId;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private OffsetDateTime effectiveEndDate;
        private Boolean terminated;
        private Double rate;
        private String note;
        private String country;

        private ReplaceOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set typeId
         * @param typeId  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder typeId(String typeId) {
            this.typeId = typeId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set effectiveEndDate
         * @param effectiveEndDate  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder effectiveEndDate(OffsetDateTime effectiveEndDate) {
            this.effectiveEndDate = effectiveEndDate;
            return this;
        }
        
        /**
         * Set terminated
         * @param terminated  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder terminated(Boolean terminated) {
            this.terminated = terminated;
            return this;
        }
        
        /**
         * Set rate
         * @param rate  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder rate(Double rate) {
            this.rate = rate;
            return this;
        }
        
        /**
         * Set note
         * @param note  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return ReplaceOneRequestBuilder
         */
        public ReplaceOneRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Build call for replaceOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateEmploymentRequest updateEmploymentRequest = buildBodyParams();
            return replaceOneCall(id, updateEmploymentRequest, _callback);
        }

        private UpdateEmploymentRequest buildBodyParams() {
            UpdateEmploymentRequest updateEmploymentRequest = new UpdateEmploymentRequest();
            updateEmploymentRequest.employeeId(this.employeeId);
            updateEmploymentRequest.userId(this.userId);
            updateEmploymentRequest.typeId(this.typeId);
            updateEmploymentRequest.startDate(this.startDate);
            updateEmploymentRequest.endDate(this.endDate);
            updateEmploymentRequest.effectiveEndDate(this.effectiveEndDate);
            updateEmploymentRequest.terminated(this.terminated);
            updateEmploymentRequest.rate(this.rate);
            updateEmploymentRequest.note(this.note);
            if (this.country != null)
            updateEmploymentRequest.country(UpdateEmploymentRequest.CountryEnum.fromValue(this.country));
            return updateEmploymentRequest;
        }

        /**
         * Execute replaceOne request
         * @return EmploymentResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentResponseMapped execute() throws ApiException {
            UpdateEmploymentRequest updateEmploymentRequest = buildBodyParams();
            ApiResponse<EmploymentResponseMapped> localVarResp = replaceOneWithHttpInfo(id, updateEmploymentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceOne request with HTTP info returned
         * @return ApiResponse&lt;EmploymentResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateEmploymentRequest updateEmploymentRequest = buildBodyParams();
            return replaceOneWithHttpInfo(id, updateEmploymentRequest);
        }

        /**
         * Execute replaceOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentResponseMapped> _callback) throws ApiException {
            UpdateEmploymentRequest updateEmploymentRequest = buildBodyParams();
            return replaceOneAsync(id, updateEmploymentRequest, _callback);
        }
    }

    /**
     * Replace One Employment
     * Replace One Employment
     * @param id Resource Id (required)
     * @param updateEmploymentRequest  (required)
     * @return ReplaceOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceOneRequestBuilder replaceOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReplaceOneRequestBuilder(id);
    }
    private okhttp3.Call updateEmploymentDataCall(String id, UpdateEmploymentRequest updateEmploymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmploymentRequest;

        // create path and map variables
        String localVarPath = "/employment/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmploymentDataValidateBeforeCall(String id, UpdateEmploymentRequest updateEmploymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEmploymentData(Async)");
        }

        // verify the required parameter 'updateEmploymentRequest' is set
        if (updateEmploymentRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEmploymentRequest' when calling updateEmploymentData(Async)");
        }

        return updateEmploymentDataCall(id, updateEmploymentRequest, _callback);

    }


    private ApiResponse<EmploymentResponseMapped> updateEmploymentDataWithHttpInfo(String id, UpdateEmploymentRequest updateEmploymentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmploymentDataValidateBeforeCall(id, updateEmploymentRequest, null);
        Type localVarReturnType = new TypeToken<EmploymentResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmploymentDataAsync(String id, UpdateEmploymentRequest updateEmploymentRequest, final ApiCallback<EmploymentResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmploymentDataValidateBeforeCall(id, updateEmploymentRequest, _callback);
        Type localVarReturnType = new TypeToken<EmploymentResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmploymentDataRequestBuilder {
        private final String id;
        private String employeeId;
        private String userId;
        private String typeId;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private OffsetDateTime effectiveEndDate;
        private Boolean terminated;
        private Double rate;
        private String note;
        private String country;

        private UpdateEmploymentDataRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set typeId
         * @param typeId  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder typeId(String typeId) {
            this.typeId = typeId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set effectiveEndDate
         * @param effectiveEndDate  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder effectiveEndDate(OffsetDateTime effectiveEndDate) {
            this.effectiveEndDate = effectiveEndDate;
            return this;
        }
        
        /**
         * Set terminated
         * @param terminated  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder terminated(Boolean terminated) {
            this.terminated = terminated;
            return this;
        }
        
        /**
         * Set rate
         * @param rate  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder rate(Double rate) {
            this.rate = rate;
            return this;
        }
        
        /**
         * Set note
         * @param note  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdateEmploymentDataRequestBuilder
         */
        public UpdateEmploymentDataRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Build call for updateEmploymentData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateEmploymentRequest updateEmploymentRequest = buildBodyParams();
            return updateEmploymentDataCall(id, updateEmploymentRequest, _callback);
        }

        private UpdateEmploymentRequest buildBodyParams() {
            UpdateEmploymentRequest updateEmploymentRequest = new UpdateEmploymentRequest();
            updateEmploymentRequest.employeeId(this.employeeId);
            updateEmploymentRequest.userId(this.userId);
            updateEmploymentRequest.typeId(this.typeId);
            updateEmploymentRequest.startDate(this.startDate);
            updateEmploymentRequest.endDate(this.endDate);
            updateEmploymentRequest.effectiveEndDate(this.effectiveEndDate);
            updateEmploymentRequest.terminated(this.terminated);
            updateEmploymentRequest.rate(this.rate);
            updateEmploymentRequest.note(this.note);
            if (this.country != null)
            updateEmploymentRequest.country(UpdateEmploymentRequest.CountryEnum.fromValue(this.country));
            return updateEmploymentRequest;
        }

        /**
         * Execute updateEmploymentData request
         * @return EmploymentResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentResponseMapped execute() throws ApiException {
            UpdateEmploymentRequest updateEmploymentRequest = buildBodyParams();
            ApiResponse<EmploymentResponseMapped> localVarResp = updateEmploymentDataWithHttpInfo(id, updateEmploymentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmploymentData request with HTTP info returned
         * @return ApiResponse&lt;EmploymentResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateEmploymentRequest updateEmploymentRequest = buildBodyParams();
            return updateEmploymentDataWithHttpInfo(id, updateEmploymentRequest);
        }

        /**
         * Execute updateEmploymentData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentResponseMapped> _callback) throws ApiException {
            UpdateEmploymentRequest updateEmploymentRequest = buildBodyParams();
            return updateEmploymentDataAsync(id, updateEmploymentRequest, _callback);
        }
    }

    /**
     * Update One Employment
     * Update One Employment
     * @param id Resource Id (required)
     * @param updateEmploymentRequest  (required)
     * @return UpdateEmploymentDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmploymentDataRequestBuilder updateEmploymentData(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateEmploymentDataRequestBuilder(id);
    }
}
