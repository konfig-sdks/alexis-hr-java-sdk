/*
 * AlexisHR API
 * <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v1-preview
 * Contact: support@alexishr.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BankAccountRequest;
import com.konfigthis.client.model.CreateEmployeeRequest;
import com.konfigthis.client.model.EmployeeGetOneResponseMapped;
import com.konfigthis.client.model.EmployeeListManyEmployeesFiltersParameter;
import com.konfigthis.client.model.EmployeeListManyEmployeesSortParameter;
import com.konfigthis.client.model.EmployeeResponseMapped;
import com.konfigthis.client.model.EmployeeTaxRequest;
import com.konfigthis.client.model.EmployeesGetManyResponseMapped;
import com.konfigthis.client.model.EmptyResponseMapped;
import com.konfigthis.client.model.HomeAddressRequest;
import com.konfigthis.client.model.UpdateEmployeeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOneEmployeeCall(CreateEmployeeRequest createEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEmployeeRequest;

        // create path and map variables
        String localVarPath = "/employee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneEmployeeValidateBeforeCall(CreateEmployeeRequest createEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createEmployeeRequest' is set
        if (createEmployeeRequest == null) {
            throw new ApiException("Missing the required parameter 'createEmployeeRequest' when calling createOneEmployee(Async)");
        }

        return createOneEmployeeCall(createEmployeeRequest, _callback);

    }


    private ApiResponse<EmployeeResponseMapped> createOneEmployeeWithHttpInfo(CreateEmployeeRequest createEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneEmployeeValidateBeforeCall(createEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneEmployeeAsync(CreateEmployeeRequest createEmployeeRequest, final ApiCallback<EmployeeResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneEmployeeValidateBeforeCall(createEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneEmployeeRequestBuilder {
        private String title;
        private String officeId;
        private String managerEmployeeId;
        private String departmentId;
        private String costCenterId;
        private String userName;
        private String division;
        private String organization;
        private String employeeNumber;
        private EmployeeTaxRequest tax;
        private String workEmail;
        private String workPhone;
        private Boolean hasOccupationalPension;
        private String privateEmail;
        private String firstName;
        private String lastName;
        private String ssn;
        private String privatePhone;
        private String birthDate;
        private String avatarUrl;
        private String nationality;
        private String gender;
        private String pronoun;
        private BankAccountRequest bankAccount;
        private HomeAddressRequest homeAddress;
        private Object custom;

        private CreateOneEmployeeRequestBuilder() {
        }

        /**
         * Set title
         * @param title  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set officeId
         * @param officeId  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder officeId(String officeId) {
            this.officeId = officeId;
            return this;
        }
        
        /**
         * Set managerEmployeeId
         * @param managerEmployeeId  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder managerEmployeeId(String managerEmployeeId) {
            this.managerEmployeeId = managerEmployeeId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set costCenterId
         * @param costCenterId  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder costCenterId(String costCenterId) {
            this.costCenterId = costCenterId;
            return this;
        }
        
        /**
         * Set userName
         * @param userName  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder userName(String userName) {
            this.userName = userName;
            return this;
        }
        
        /**
         * Set division
         * @param division  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder division(String division) {
            this.division = division;
            return this;
        }
        
        /**
         * Set organization
         * @param organization  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder organization(String organization) {
            this.organization = organization;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set tax
         * @param tax  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder tax(EmployeeTaxRequest tax) {
            this.tax = tax;
            return this;
        }
        
        /**
         * Set workEmail
         * @param workEmail  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder workEmail(String workEmail) {
            this.workEmail = workEmail;
            return this;
        }
        
        /**
         * Set workPhone
         * @param workPhone  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder workPhone(String workPhone) {
            this.workPhone = workPhone;
            return this;
        }
        
        /**
         * Set hasOccupationalPension
         * @param hasOccupationalPension  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder hasOccupationalPension(Boolean hasOccupationalPension) {
            this.hasOccupationalPension = hasOccupationalPension;
            return this;
        }
        
        /**
         * Set privateEmail
         * @param privateEmail  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder privateEmail(String privateEmail) {
            this.privateEmail = privateEmail;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set privatePhone
         * @param privatePhone  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder privatePhone(String privatePhone) {
            this.privatePhone = privatePhone;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder birthDate(String birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set avatarUrl
         * @param avatarUrl  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder avatarUrl(String avatarUrl) {
            this.avatarUrl = avatarUrl;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set pronoun
         * @param pronoun  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder pronoun(String pronoun) {
            this.pronoun = pronoun;
            return this;
        }
        
        /**
         * Set bankAccount
         * @param bankAccount  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder bankAccount(BankAccountRequest bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }
        
        /**
         * Set homeAddress
         * @param homeAddress  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder homeAddress(HomeAddressRequest homeAddress) {
            this.homeAddress = homeAddress;
            return this;
        }
        
        /**
         * Set custom
         * @param custom  (optional)
         * @return CreateOneEmployeeRequestBuilder
         */
        public CreateOneEmployeeRequestBuilder custom(Object custom) {
            this.custom = custom;
            return this;
        }
        
        /**
         * Build call for createOneEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateEmployeeRequest createEmployeeRequest = buildBodyParams();
            return createOneEmployeeCall(createEmployeeRequest, _callback);
        }

        private CreateEmployeeRequest buildBodyParams() {
            CreateEmployeeRequest createEmployeeRequest = new CreateEmployeeRequest();
            createEmployeeRequest.title(this.title);
            createEmployeeRequest.officeId(this.officeId);
            createEmployeeRequest.managerEmployeeId(this.managerEmployeeId);
            createEmployeeRequest.departmentId(this.departmentId);
            createEmployeeRequest.costCenterId(this.costCenterId);
            createEmployeeRequest.userName(this.userName);
            createEmployeeRequest.division(this.division);
            createEmployeeRequest.organization(this.organization);
            createEmployeeRequest.employeeNumber(this.employeeNumber);
            createEmployeeRequest.tax(this.tax);
            createEmployeeRequest.workEmail(this.workEmail);
            createEmployeeRequest.workPhone(this.workPhone);
            createEmployeeRequest.hasOccupationalPension(this.hasOccupationalPension);
            createEmployeeRequest.privateEmail(this.privateEmail);
            createEmployeeRequest.firstName(this.firstName);
            createEmployeeRequest.lastName(this.lastName);
            createEmployeeRequest.ssn(this.ssn);
            createEmployeeRequest.privatePhone(this.privatePhone);
            createEmployeeRequest.birthDate(this.birthDate);
            createEmployeeRequest.avatarUrl(this.avatarUrl);
            createEmployeeRequest.nationality(this.nationality);
            createEmployeeRequest.gender(this.gender);
            createEmployeeRequest.pronoun(this.pronoun);
            createEmployeeRequest.bankAccount(this.bankAccount);
            createEmployeeRequest.homeAddress(this.homeAddress);
            createEmployeeRequest.custom(this.custom);
            return createEmployeeRequest;
        }

        /**
         * Execute createOneEmployee request
         * @return EmployeeResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeResponseMapped execute() throws ApiException {
            CreateEmployeeRequest createEmployeeRequest = buildBodyParams();
            ApiResponse<EmployeeResponseMapped> localVarResp = createOneEmployeeWithHttpInfo(createEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOneEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeeResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeResponseMapped> executeWithHttpInfo() throws ApiException {
            CreateEmployeeRequest createEmployeeRequest = buildBodyParams();
            return createOneEmployeeWithHttpInfo(createEmployeeRequest);
        }

        /**
         * Execute createOneEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeResponseMapped> _callback) throws ApiException {
            CreateEmployeeRequest createEmployeeRequest = buildBodyParams();
            return createOneEmployeeAsync(createEmployeeRequest, _callback);
        }
    }

    /**
     * Create One Employee
     * Create One Employee
     * @param createEmployeeRequest  (required)
     * @return CreateOneEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneEmployeeRequestBuilder createOneEmployee() throws IllegalArgumentException {
        return new CreateOneEmployeeRequestBuilder();
    }
    private okhttp3.Call getOneCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneValidateBeforeCall(String id, List<String> select, List<String> relations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOne(Async)");
        }

        return getOneCall(id, select, relations, _callback);

    }


    private ApiResponse<EmployeeGetOneResponseMapped> getOneWithHttpInfo(String id, List<String> select, List<String> relations) throws ApiException {
        okhttp3.Call localVarCall = getOneValidateBeforeCall(id, select, relations, null);
        Type localVarReturnType = new TypeToken<EmployeeGetOneResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneAsync(String id, List<String> select, List<String> relations, final ApiCallback<EmployeeGetOneResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneValidateBeforeCall(id, select, relations, _callback);
        Type localVarReturnType = new TypeToken<EmployeeGetOneResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneRequestBuilder {
        private final String id;
        private List<String> select;
        private List<String> relations;

        private GetOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set select
         * @param select Select Employee fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return GetOneRequestBuilder
         */
        public GetOneRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related Employee resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return GetOneRequestBuilder
         */
        public GetOneRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Build call for getOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneCall(id, select, relations, _callback);
        }


        /**
         * Execute getOne request
         * @return EmployeeGetOneResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeGetOneResponseMapped execute() throws ApiException {
            ApiResponse<EmployeeGetOneResponseMapped> localVarResp = getOneWithHttpInfo(id, select, relations);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOne request with HTTP info returned
         * @return ApiResponse&lt;EmployeeGetOneResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeGetOneResponseMapped> executeWithHttpInfo() throws ApiException {
            return getOneWithHttpInfo(id, select, relations);
        }

        /**
         * Execute getOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeGetOneResponseMapped> _callback) throws ApiException {
            return getOneAsync(id, select, relations, _callback);
        }
    }

    /**
     * Get One Employee
     * Get One Employee
     * @param id Resource Id (required)
     * @return GetOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetOneRequestBuilder getOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOneRequestBuilder(id);
    }
    private okhttp3.Call listManyEmployeesCall(List<String> select, List<String> relations, EmployeeListManyEmployeesFiltersParameter filters, Integer limit, Integer offset, EmployeeListManyEmployeesSortParameter sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "select", select));
        }

        if (relations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "relations", relations));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listManyEmployeesValidateBeforeCall(List<String> select, List<String> relations, EmployeeListManyEmployeesFiltersParameter filters, Integer limit, Integer offset, EmployeeListManyEmployeesSortParameter sort, final ApiCallback _callback) throws ApiException {
        return listManyEmployeesCall(select, relations, filters, limit, offset, sort, _callback);

    }


    private ApiResponse<EmployeesGetManyResponseMapped> listManyEmployeesWithHttpInfo(List<String> select, List<String> relations, EmployeeListManyEmployeesFiltersParameter filters, Integer limit, Integer offset, EmployeeListManyEmployeesSortParameter sort) throws ApiException {
        okhttp3.Call localVarCall = listManyEmployeesValidateBeforeCall(select, relations, filters, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<EmployeesGetManyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listManyEmployeesAsync(List<String> select, List<String> relations, EmployeeListManyEmployeesFiltersParameter filters, Integer limit, Integer offset, EmployeeListManyEmployeesSortParameter sort, final ApiCallback<EmployeesGetManyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = listManyEmployeesValidateBeforeCall(select, relations, filters, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<EmployeesGetManyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListManyEmployeesRequestBuilder {
        private List<String> select;
        private List<String> relations;
        private EmployeeListManyEmployeesFiltersParameter filters;
        private Integer limit;
        private Integer offset;
        private EmployeeListManyEmployeesSortParameter sort;

        private ListManyEmployeesRequestBuilder() {
        }

        /**
         * Set select
         * @param select Select Employee fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;) (optional)
         * @return ListManyEmployeesRequestBuilder
         */
        public ListManyEmployeesRequestBuilder select(List<String> select) {
            this.select = select;
            return this;
        }
        
        /**
         * Set relations
         * @param relations Select related Employee resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;) (optional)
         * @return ListManyEmployeesRequestBuilder
         */
        public ListManyEmployeesRequestBuilder relations(List<String> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Set filters
         * @param filters Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;) (optional)
         * @return ListManyEmployeesRequestBuilder
         */
        public ListManyEmployeesRequestBuilder filters(EmployeeListManyEmployeesFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit amount of received Employees. (e.g. &#x60;limit&#x3D;20&#x60;) (optional)
         * @return ListManyEmployeesRequestBuilder
         */
        public ListManyEmployeesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset amount of received Employees. (e.g. &#x60;offset&#x3D;20&#x60;) (optional)
         * @return ListManyEmployeesRequestBuilder
         */
        public ListManyEmployeesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort received Employees by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;) (optional)
         * @return ListManyEmployeesRequestBuilder
         */
        public ListManyEmployeesRequestBuilder sort(EmployeeListManyEmployeesSortParameter sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listManyEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listManyEmployeesCall(select, relations, filters, limit, offset, sort, _callback);
        }


        /**
         * Execute listManyEmployees request
         * @return EmployeesGetManyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesGetManyResponseMapped execute() throws ApiException {
            ApiResponse<EmployeesGetManyResponseMapped> localVarResp = listManyEmployeesWithHttpInfo(select, relations, filters, limit, offset, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listManyEmployees request with HTTP info returned
         * @return ApiResponse&lt;EmployeesGetManyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesGetManyResponseMapped> executeWithHttpInfo() throws ApiException {
            return listManyEmployeesWithHttpInfo(select, relations, filters, limit, offset, sort);
        }

        /**
         * Execute listManyEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesGetManyResponseMapped> _callback) throws ApiException {
            return listManyEmployeesAsync(select, relations, filters, limit, offset, sort, _callback);
        }
    }

    /**
     * Get Many Employees
     * Get Many Employees
     * @return ListManyEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListManyEmployeesRequestBuilder listManyEmployees() throws IllegalArgumentException {
        return new ListManyEmployeesRequestBuilder();
    }
    private okhttp3.Call removeEmployeeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEmployeeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeEmployee(Async)");
        }

        return removeEmployeeCall(id, _callback);

    }


    private ApiResponse<EmptyResponseMapped> removeEmployeeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = removeEmployeeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEmployeeAsync(String id, final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEmployeeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEmployeeRequestBuilder {
        private final String id;

        private RemoveEmployeeRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for removeEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEmployeeCall(id, _callback);
        }


        /**
         * Execute removeEmployee request
         * @return EmptyResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponseMapped execute() throws ApiException {
            ApiResponse<EmptyResponseMapped> localVarResp = removeEmployeeWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponseMapped> executeWithHttpInfo() throws ApiException {
            return removeEmployeeWithHttpInfo(id);
        }

        /**
         * Execute removeEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponseMapped> _callback) throws ApiException {
            return removeEmployeeAsync(id, _callback);
        }
    }

    /**
     * Delete One Employee
     * Delete One Employee
     * @param id Resource Id (required)
     * @return RemoveEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEmployeeRequestBuilder removeEmployee(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveEmployeeRequestBuilder(id);
    }
    private okhttp3.Call replaceOneEmployeeCall(String id, UpdateEmployeeRequest updateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmployeeRequest;

        // create path and map variables
        String localVarPath = "/employee/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceOneEmployeeValidateBeforeCall(String id, UpdateEmployeeRequest updateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceOneEmployee(Async)");
        }

        // verify the required parameter 'updateEmployeeRequest' is set
        if (updateEmployeeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEmployeeRequest' when calling replaceOneEmployee(Async)");
        }

        return replaceOneEmployeeCall(id, updateEmployeeRequest, _callback);

    }


    private ApiResponse<EmployeeResponseMapped> replaceOneEmployeeWithHttpInfo(String id, UpdateEmployeeRequest updateEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceOneEmployeeValidateBeforeCall(id, updateEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceOneEmployeeAsync(String id, UpdateEmployeeRequest updateEmployeeRequest, final ApiCallback<EmployeeResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceOneEmployeeValidateBeforeCall(id, updateEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceOneEmployeeRequestBuilder {
        private final String id;
        private String title;
        private String officeId;
        private String managerEmployeeId;
        private String departmentId;
        private String costCenterId;
        private String userName;
        private String division;
        private String organization;
        private String employeeNumber;
        private EmployeeTaxRequest tax;
        private String workEmail;
        private String workPhone;
        private Boolean hasOccupationalPension;
        private String privateEmail;
        private String firstName;
        private String lastName;
        private String ssn;
        private String privatePhone;
        private String birthDate;
        private String avatarUrl;
        private String nationality;
        private String gender;
        private String pronoun;
        private BankAccountRequest bankAccount;
        private HomeAddressRequest homeAddress;
        private Object custom;
        private Boolean active;

        private ReplaceOneEmployeeRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set officeId
         * @param officeId  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder officeId(String officeId) {
            this.officeId = officeId;
            return this;
        }
        
        /**
         * Set managerEmployeeId
         * @param managerEmployeeId  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder managerEmployeeId(String managerEmployeeId) {
            this.managerEmployeeId = managerEmployeeId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set costCenterId
         * @param costCenterId  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder costCenterId(String costCenterId) {
            this.costCenterId = costCenterId;
            return this;
        }
        
        /**
         * Set userName
         * @param userName  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder userName(String userName) {
            this.userName = userName;
            return this;
        }
        
        /**
         * Set division
         * @param division  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder division(String division) {
            this.division = division;
            return this;
        }
        
        /**
         * Set organization
         * @param organization  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder organization(String organization) {
            this.organization = organization;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set tax
         * @param tax  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder tax(EmployeeTaxRequest tax) {
            this.tax = tax;
            return this;
        }
        
        /**
         * Set workEmail
         * @param workEmail  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder workEmail(String workEmail) {
            this.workEmail = workEmail;
            return this;
        }
        
        /**
         * Set workPhone
         * @param workPhone  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder workPhone(String workPhone) {
            this.workPhone = workPhone;
            return this;
        }
        
        /**
         * Set hasOccupationalPension
         * @param hasOccupationalPension  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder hasOccupationalPension(Boolean hasOccupationalPension) {
            this.hasOccupationalPension = hasOccupationalPension;
            return this;
        }
        
        /**
         * Set privateEmail
         * @param privateEmail  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder privateEmail(String privateEmail) {
            this.privateEmail = privateEmail;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set privatePhone
         * @param privatePhone  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder privatePhone(String privatePhone) {
            this.privatePhone = privatePhone;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder birthDate(String birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set avatarUrl
         * @param avatarUrl  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder avatarUrl(String avatarUrl) {
            this.avatarUrl = avatarUrl;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set pronoun
         * @param pronoun  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder pronoun(String pronoun) {
            this.pronoun = pronoun;
            return this;
        }
        
        /**
         * Set bankAccount
         * @param bankAccount  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder bankAccount(BankAccountRequest bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }
        
        /**
         * Set homeAddress
         * @param homeAddress  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder homeAddress(HomeAddressRequest homeAddress) {
            this.homeAddress = homeAddress;
            return this;
        }
        
        /**
         * Set custom
         * @param custom  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder custom(Object custom) {
            this.custom = custom;
            return this;
        }
        
        /**
         * Set active
         * @param active  (optional)
         * @return ReplaceOneEmployeeRequestBuilder
         */
        public ReplaceOneEmployeeRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for replaceOneEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateEmployeeRequest updateEmployeeRequest = buildBodyParams();
            return replaceOneEmployeeCall(id, updateEmployeeRequest, _callback);
        }

        private UpdateEmployeeRequest buildBodyParams() {
            UpdateEmployeeRequest updateEmployeeRequest = new UpdateEmployeeRequest();
            updateEmployeeRequest.title(this.title);
            updateEmployeeRequest.officeId(this.officeId);
            updateEmployeeRequest.managerEmployeeId(this.managerEmployeeId);
            updateEmployeeRequest.departmentId(this.departmentId);
            updateEmployeeRequest.costCenterId(this.costCenterId);
            updateEmployeeRequest.userName(this.userName);
            updateEmployeeRequest.division(this.division);
            updateEmployeeRequest.organization(this.organization);
            updateEmployeeRequest.employeeNumber(this.employeeNumber);
            updateEmployeeRequest.tax(this.tax);
            updateEmployeeRequest.workEmail(this.workEmail);
            updateEmployeeRequest.workPhone(this.workPhone);
            updateEmployeeRequest.hasOccupationalPension(this.hasOccupationalPension);
            updateEmployeeRequest.privateEmail(this.privateEmail);
            updateEmployeeRequest.firstName(this.firstName);
            updateEmployeeRequest.lastName(this.lastName);
            updateEmployeeRequest.ssn(this.ssn);
            updateEmployeeRequest.privatePhone(this.privatePhone);
            updateEmployeeRequest.birthDate(this.birthDate);
            updateEmployeeRequest.avatarUrl(this.avatarUrl);
            updateEmployeeRequest.nationality(this.nationality);
            updateEmployeeRequest.gender(this.gender);
            updateEmployeeRequest.pronoun(this.pronoun);
            updateEmployeeRequest.bankAccount(this.bankAccount);
            updateEmployeeRequest.homeAddress(this.homeAddress);
            updateEmployeeRequest.custom(this.custom);
            updateEmployeeRequest.active(this.active);
            return updateEmployeeRequest;
        }

        /**
         * Execute replaceOneEmployee request
         * @return EmployeeResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeResponseMapped execute() throws ApiException {
            UpdateEmployeeRequest updateEmployeeRequest = buildBodyParams();
            ApiResponse<EmployeeResponseMapped> localVarResp = replaceOneEmployeeWithHttpInfo(id, updateEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceOneEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeeResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateEmployeeRequest updateEmployeeRequest = buildBodyParams();
            return replaceOneEmployeeWithHttpInfo(id, updateEmployeeRequest);
        }

        /**
         * Execute replaceOneEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeResponseMapped> _callback) throws ApiException {
            UpdateEmployeeRequest updateEmployeeRequest = buildBodyParams();
            return replaceOneEmployeeAsync(id, updateEmployeeRequest, _callback);
        }
    }

    /**
     * Replace One Employee
     * Replace One Employee
     * @param id Resource Id (required)
     * @param updateEmployeeRequest  (required)
     * @return ReplaceOneEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceOneEmployeeRequestBuilder replaceOneEmployee(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReplaceOneEmployeeRequestBuilder(id);
    }
    private okhttp3.Call updateOneCall(String id, UpdateEmployeeRequest updateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmployeeRequest;

        // create path and map variables
        String localVarPath = "/employee/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOneValidateBeforeCall(String id, UpdateEmployeeRequest updateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOne(Async)");
        }

        // verify the required parameter 'updateEmployeeRequest' is set
        if (updateEmployeeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEmployeeRequest' when calling updateOne(Async)");
        }

        return updateOneCall(id, updateEmployeeRequest, _callback);

    }


    private ApiResponse<EmployeeResponseMapped> updateOneWithHttpInfo(String id, UpdateEmployeeRequest updateEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOneValidateBeforeCall(id, updateEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeResponseMapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOneAsync(String id, UpdateEmployeeRequest updateEmployeeRequest, final ApiCallback<EmployeeResponseMapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOneValidateBeforeCall(id, updateEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeResponseMapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOneRequestBuilder {
        private final String id;
        private String title;
        private String officeId;
        private String managerEmployeeId;
        private String departmentId;
        private String costCenterId;
        private String userName;
        private String division;
        private String organization;
        private String employeeNumber;
        private EmployeeTaxRequest tax;
        private String workEmail;
        private String workPhone;
        private Boolean hasOccupationalPension;
        private String privateEmail;
        private String firstName;
        private String lastName;
        private String ssn;
        private String privatePhone;
        private String birthDate;
        private String avatarUrl;
        private String nationality;
        private String gender;
        private String pronoun;
        private BankAccountRequest bankAccount;
        private HomeAddressRequest homeAddress;
        private Object custom;
        private Boolean active;

        private UpdateOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set officeId
         * @param officeId  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder officeId(String officeId) {
            this.officeId = officeId;
            return this;
        }
        
        /**
         * Set managerEmployeeId
         * @param managerEmployeeId  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder managerEmployeeId(String managerEmployeeId) {
            this.managerEmployeeId = managerEmployeeId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set costCenterId
         * @param costCenterId  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder costCenterId(String costCenterId) {
            this.costCenterId = costCenterId;
            return this;
        }
        
        /**
         * Set userName
         * @param userName  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder userName(String userName) {
            this.userName = userName;
            return this;
        }
        
        /**
         * Set division
         * @param division  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder division(String division) {
            this.division = division;
            return this;
        }
        
        /**
         * Set organization
         * @param organization  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder organization(String organization) {
            this.organization = organization;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set tax
         * @param tax  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder tax(EmployeeTaxRequest tax) {
            this.tax = tax;
            return this;
        }
        
        /**
         * Set workEmail
         * @param workEmail  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder workEmail(String workEmail) {
            this.workEmail = workEmail;
            return this;
        }
        
        /**
         * Set workPhone
         * @param workPhone  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder workPhone(String workPhone) {
            this.workPhone = workPhone;
            return this;
        }
        
        /**
         * Set hasOccupationalPension
         * @param hasOccupationalPension  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder hasOccupationalPension(Boolean hasOccupationalPension) {
            this.hasOccupationalPension = hasOccupationalPension;
            return this;
        }
        
        /**
         * Set privateEmail
         * @param privateEmail  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder privateEmail(String privateEmail) {
            this.privateEmail = privateEmail;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set privatePhone
         * @param privatePhone  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder privatePhone(String privatePhone) {
            this.privatePhone = privatePhone;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder birthDate(String birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set avatarUrl
         * @param avatarUrl  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder avatarUrl(String avatarUrl) {
            this.avatarUrl = avatarUrl;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set pronoun
         * @param pronoun  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder pronoun(String pronoun) {
            this.pronoun = pronoun;
            return this;
        }
        
        /**
         * Set bankAccount
         * @param bankAccount  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder bankAccount(BankAccountRequest bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }
        
        /**
         * Set homeAddress
         * @param homeAddress  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder homeAddress(HomeAddressRequest homeAddress) {
            this.homeAddress = homeAddress;
            return this;
        }
        
        /**
         * Set custom
         * @param custom  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder custom(Object custom) {
            this.custom = custom;
            return this;
        }
        
        /**
         * Set active
         * @param active  (optional)
         * @return UpdateOneRequestBuilder
         */
        public UpdateOneRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for updateOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateEmployeeRequest updateEmployeeRequest = buildBodyParams();
            return updateOneCall(id, updateEmployeeRequest, _callback);
        }

        private UpdateEmployeeRequest buildBodyParams() {
            UpdateEmployeeRequest updateEmployeeRequest = new UpdateEmployeeRequest();
            updateEmployeeRequest.title(this.title);
            updateEmployeeRequest.officeId(this.officeId);
            updateEmployeeRequest.managerEmployeeId(this.managerEmployeeId);
            updateEmployeeRequest.departmentId(this.departmentId);
            updateEmployeeRequest.costCenterId(this.costCenterId);
            updateEmployeeRequest.userName(this.userName);
            updateEmployeeRequest.division(this.division);
            updateEmployeeRequest.organization(this.organization);
            updateEmployeeRequest.employeeNumber(this.employeeNumber);
            updateEmployeeRequest.tax(this.tax);
            updateEmployeeRequest.workEmail(this.workEmail);
            updateEmployeeRequest.workPhone(this.workPhone);
            updateEmployeeRequest.hasOccupationalPension(this.hasOccupationalPension);
            updateEmployeeRequest.privateEmail(this.privateEmail);
            updateEmployeeRequest.firstName(this.firstName);
            updateEmployeeRequest.lastName(this.lastName);
            updateEmployeeRequest.ssn(this.ssn);
            updateEmployeeRequest.privatePhone(this.privatePhone);
            updateEmployeeRequest.birthDate(this.birthDate);
            updateEmployeeRequest.avatarUrl(this.avatarUrl);
            updateEmployeeRequest.nationality(this.nationality);
            updateEmployeeRequest.gender(this.gender);
            updateEmployeeRequest.pronoun(this.pronoun);
            updateEmployeeRequest.bankAccount(this.bankAccount);
            updateEmployeeRequest.homeAddress(this.homeAddress);
            updateEmployeeRequest.custom(this.custom);
            updateEmployeeRequest.active(this.active);
            return updateEmployeeRequest;
        }

        /**
         * Execute updateOne request
         * @return EmployeeResponseMapped
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeResponseMapped execute() throws ApiException {
            UpdateEmployeeRequest updateEmployeeRequest = buildBodyParams();
            ApiResponse<EmployeeResponseMapped> localVarResp = updateOneWithHttpInfo(id, updateEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOne request with HTTP info returned
         * @return ApiResponse&lt;EmployeeResponseMapped&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeResponseMapped> executeWithHttpInfo() throws ApiException {
            UpdateEmployeeRequest updateEmployeeRequest = buildBodyParams();
            return updateOneWithHttpInfo(id, updateEmployeeRequest);
        }

        /**
         * Execute updateOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeResponseMapped> _callback) throws ApiException {
            UpdateEmployeeRequest updateEmployeeRequest = buildBodyParams();
            return updateOneAsync(id, updateEmployeeRequest, _callback);
        }
    }

    /**
     * Update One Employee
     * Update One Employee
     * @param id Resource Id (required)
     * @param updateEmployeeRequest  (required)
     * @return UpdateOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOneRequestBuilder updateOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateOneRequestBuilder(id);
    }
}
